import { AccountNotFoundError, IncompatibleClientError, isSmartAccountClient, } from "@aa-sdk/core";
/**
 * Updates the owners of a multi-owner light account. This includes adding new owners and removing existing ones.
 *
 * @example
 * ```ts
 * import { updateOwners, createLightAccountClient } from "@account-kit/smart-contracts";
 *
 * const lightAccountClient = createLightAccountClient({
 *  signer,
 *  transport,
 *  chain,
 * });
 *
 * const txHash = await updateOwners(lightAccountClient, {
 *  ownerstoAdd: [newOwnerAddress], // or empty if you just want to remove owners
 *  ownersToRemove: [oldOwnerAddress], // or empty if you just want to add owners
 *  waitForTxn: true, // set to false to return a uoHash instead
 * });
 * ```
 *
 * @param {Client<TTransport, TChain, TAccount>} client The client instance used to interact with the account
 * @param {UpdateMultiOwnerLightAccountOwnersParams<TSigner, TAccount>} args The parameters for updating the account owners
 * @returns {Promise<Hex>} A promise that resolves to the transaction hash or the full transaction result if `waitForTxn` is `true`
 */
export const updateOwners = async (client, { ownersToAdd, ownersToRemove, waitForTxn, overrides, account = client.account, }) => {
    if (!account) {
        throw new AccountNotFoundError();
    }
    if (!isSmartAccountClient(client)) {
        throw new IncompatibleClientError("SmartAccountClient", "updateOwners", client);
    }
    const data = account.encodeUpdateOwners(ownersToAdd, ownersToRemove);
    const result = await client.sendUserOperation({
        uo: {
            target: account.address,
            data,
        },
        account,
        overrides,
    });
    if (waitForTxn) {
        return client.waitForUserOperationTransaction(result);
    }
    return result.hash;
};
//# sourceMappingURL=updateOwners.js.map