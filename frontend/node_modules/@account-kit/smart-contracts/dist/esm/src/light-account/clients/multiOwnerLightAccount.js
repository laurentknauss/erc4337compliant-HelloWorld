import { createSmartAccountClient, } from "@aa-sdk/core";
import {} from "viem";
import { createMultiOwnerLightAccount, } from "../accounts/multiOwner.js";
import { multiOwnerLightAccountClientActions, } from "../decorators/multiOwnerLightAccount.js";
/**
 * Creates a multi-owner light account client using the provided parameters. It first creates a multi-owner light account and then creates a smart account client with the provided configurations.
 *
 * @example
 * ```ts
 * import { createMultiOwnerLightAccountClient } from "@account-kit/smart-contracts";
 * import { LocalAccountSigner } from "@aa-sdk/core";
 * import { sepolia } from "viem/chains";
 * import { http, generatePrivateKey } from "viem"
 *
 * const account = await createMultiOwnerLightAccountClient({
 *  chain: sepolia,
 *  transport: http("RPC_URL"),
 *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())
 * });
 * ```
 *
 * @param {CreateMultiOwnerLightAccountClientParams} params the configuration for creating the multi-owner light account client
 * @returns {Promise<SmartAccountClient>} a promise that resolves to a `SmartAccountClient` containing the created account client and relevant methods
 */
export async function createMultiOwnerLightAccountClient(params) {
    const { transport, chain } = params;
    const lightAccount = await createMultiOwnerLightAccount({
        ...params,
        transport,
        chain,
    });
    return createSmartAccountClient({
        ...params,
        transport,
        chain: chain,
        account: lightAccount,
    }).extend(multiOwnerLightAccountClientActions);
}
//# sourceMappingURL=multiOwnerLightAccount.js.map