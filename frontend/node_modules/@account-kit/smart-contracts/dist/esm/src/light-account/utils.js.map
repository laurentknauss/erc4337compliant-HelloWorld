{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/light-account/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { GetEntryPointFromAccount } from \"@aa-sdk/core\";\nimport { fromHex, type Address, type Chain } from \"viem\";\nimport type { LightAccountBase } from \"./accounts/base\";\nimport type {\n  LightAccountType,\n  LightAccountVersion,\n  LightAccountVersionConfig,\n  LightAccountVersionConfigs,\n} from \"./types\";\n\n/**\n * Account version registry interface that defines the light account versions\n * and the version definition for each light account type\n *\n */\nexport const AccountVersionRegistry: LightAccountVersionConfigs = {\n  LightAccount: {\n    \"v1.0.1\": {\n      entryPointVersion: \"0.6.0\",\n      addresses: {\n        default: {\n          factory:\n            \"0x000000893A26168158fbeaDD9335Be5bC96592E2\".toLowerCase() as Address,\n          impl: \"0xc1b2fc4197c9187853243e6e4eb5a4af8879a1c0\".toLowerCase() as Address,\n        },\n      },\n    },\n    \"v1.0.2\": {\n      entryPointVersion: \"0.6.0\",\n      addresses: {\n        default: {\n          factory:\n            \"0x00000055C0b4fA41dde26A74435ff03692292FBD\".toLowerCase() as Address,\n          impl: \"0x5467b1947F47d0646704EB801E075e72aeAe8113\".toLowerCase() as Address,\n        },\n      },\n    },\n    \"v1.1.0\": {\n      entryPointVersion: \"0.6.0\",\n      addresses: {\n        default: {\n          factory:\n            \"0x00004EC70002a32400f8ae005A26081065620D20\".toLowerCase() as Address,\n          impl: \"0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba\".toLowerCase() as Address,\n        },\n      },\n    },\n    \"v2.0.0\": {\n      entryPointVersion: \"0.7.0\",\n      addresses: {\n        default: {\n          factory:\n            \"0x0000000000400CdFef5E2714E63d8040b700BC24\".toLowerCase() as Address,\n          impl: \"0x8E8e658E22B12ada97B402fF0b044D6A325013C7\".toLowerCase() as Address,\n        },\n      },\n    },\n  },\n  MultiOwnerLightAccount: {\n    \"v2.0.0\": {\n      entryPointVersion: \"0.7.0\",\n      addresses: {\n        default: {\n          factory:\n            \"0x000000000019d2Ee9F2729A65AfE20bb0020AefC\".toLowerCase() as Address,\n          impl: \"0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D\".toLowerCase() as Address,\n        },\n      },\n    },\n  },\n};\n\n/**\n * Get the default light account version for the given light account type\n *\n * @template {LightAccountType} TLightAccountType\n * @returns {LightAccountVersion<TLightAccountType>} the default version for the given light account type\n */\nexport const defaultLightAccountVersion = <\n  TLightAccountType extends LightAccountType\n>(): LightAccountVersion<TLightAccountType> => \"v2.0.0\";\n\n/**\n * Utility method returning the default light account factory address given a Chain object\n *\n * @param {Chain} chain - a Chain object\n * @param {LightAccountVersion} version - the version of the light account to get the factory address for\n * @returns {Address} an for the given chain\n * @throws if the chain doesn't have an address currently deployed\n */\nexport const getDefaultLightAccountFactoryAddress = (\n  chain: Chain,\n  version: LightAccountVersion<\"LightAccount\">\n): Address => {\n  return (\n    AccountVersionRegistry.LightAccount[version].addresses.overrides?.[chain.id]\n      ?.factory ??\n    AccountVersionRegistry.LightAccount[version].addresses.default.factory\n  );\n};\n\n/**\n * Utility method returning the default multi owner light account factory address given a Chain object\n *\n * @param {Chain} chain - a Chain object\n * @param {string} version - the version of the light account to get the factory address for\n * @returns {Address} an Address for the given chain\n */\nexport const getDefaultMultiOwnerLightAccountFactoryAddress = (\n  chain: Chain,\n  version: LightAccountVersion<\"MultiOwnerLightAccount\">\n) => {\n  return (\n    AccountVersionRegistry.MultiOwnerLightAccount[version].addresses\n      .overrides?.[chain.id]?.factory ??\n    AccountVersionRegistry.MultiOwnerLightAccount[version].addresses.default\n      .factory\n  );\n};\n\n/**\n * Can be used to check if the account with one of the following implementation addresses\n * to not support 1271 signing.\n *\n * Light accounts with versions v1.0.1 and v1.0.2 do not support 1271 signing.\n */\nexport const LightAccountUnsupported1271Impls = [\n  AccountVersionRegistry.LightAccount[\"v1.0.1\"],\n  AccountVersionRegistry.LightAccount[\"v1.0.2\"],\n];\n\n/**\n * Can be used to check if the account with one of the following factory addresses\n * to not support 1271 signing.\n *\n * Light accounts with versions v1.0.1 and v1.0.2 do not support 1271 signing.\n */\nexport const LightAccountUnsupported1271Factories = new Set(\n  LightAccountUnsupported1271Impls.map((x) => [\n    x.addresses.default.factory,\n    ...Object.values(x.addresses.overrides ?? {}).map((z) => z.factory),\n  ]).flat()\n);\n\n/**\n * Get the light account version definition for the given light account and chain\n *\n * @template {LightAccountBase} TAccount\n * @param {LightAccountBase} account the light account to get the version for\n * @param {Chain} chain - the chain to get the version for\n * @returns {Promise<LightAccountVersionConfig>} the light account version definition for the given light account and chain\n */\nexport async function getLightAccountVersionForAccount<\n  TAccount extends LightAccountBase\n>(account: TAccount, chain: Chain): Promise<LightAccountVersionConfig> {\n  const accountType = account.source as LightAccountType;\n  const factoryAddress = await account.getFactoryAddress();\n  const implAddress = await account.getImplementationAddress();\n  const implToVersion = new Map(\n    Object.entries(AccountVersionRegistry[accountType]).map((pair) => {\n      const [version, def] = pair as [\n        LightAccountVersion<LightAccountType>,\n        LightAccountVersionConfig<GetEntryPointFromAccount<TAccount>>\n      ];\n\n      if (\n        def.addresses.overrides != null &&\n        chain.id in def.addresses.overrides!\n      ) {\n        return [def.addresses.overrides[chain.id].impl, version];\n      }\n\n      return [def.addresses.default.impl, version];\n    })\n  );\n\n  const factoryToVersion = new Map(\n    Object.entries(AccountVersionRegistry[accountType]).map((pair) => {\n      const [version, def] = pair as [\n        LightAccountVersion<LightAccountType>,\n        LightAccountVersionConfig<GetEntryPointFromAccount<TAccount>>\n      ];\n\n      if (\n        def.addresses.overrides != null &&\n        chain.id in def.addresses.overrides!\n      ) {\n        return [def.addresses.overrides[chain.id].factory, version];\n      }\n\n      return [def.addresses.default.factory, version];\n    })\n  );\n\n  const version =\n    fromHex(implAddress, \"bigint\") === 0n\n      ? factoryToVersion.get(factoryAddress.toLowerCase() as Address)\n      : implToVersion.get(implAddress.toLowerCase() as Address);\n\n  if (!version) {\n    throw new Error(\n      `Could not determine ${account.source} version for chain ${chain.id}`\n    );\n  }\n\n  return AccountVersionRegistry[accountType][version];\n}\n"]}