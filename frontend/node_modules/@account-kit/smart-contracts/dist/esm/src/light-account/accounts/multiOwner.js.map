{"version":3,"file":"multiOwner.js","sourceRoot":"","sources":["../../../../../src/light-account/accounts/multiOwner.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,mBAAmB,EACnB,iBAAiB,EACjB,aAAa,GAGd,MAAM,cAAc,CAAC;AACtB,OAAO,EACL,SAAS,EACT,kBAAkB,EAClB,WAAW,GAKZ,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,yBAAyB,EAAE,MAAM,sCAAsC,CAAC;AACjF,OAAO,EAAE,gCAAgC,EAAE,MAAM,6CAA6C,CAAC;AAK/F,OAAO,EACL,0BAA0B,EAC1B,8CAA8C,GAC/C,MAAM,aAAa,CAAC;AACrB,OAAO,EACL,sBAAsB,GAGvB,MAAM,WAAW,CAAC;AA8DnB;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAAC,EACjD,SAAS,EACT,KAAK,EACL,MAAM,EACN,QAAQ,EACR,OAAO,GAAG,0BAA0B,EAAE,EACtC,UAAU,GAAG,aAAa,CAAC,KAAK,EAAE;IAChC,OAAO,EAAE,OAAO;CACjB,CAAC,EACF,cAAc,EACd,cAAc,GAAG,8CAA8C,CAC7D,KAAK,EACL,OAAO,CACR,EACD,IAAI,EAAE,KAAK,GAAG,EAAE,EAChB,MAAM,GAAG,EAAE,GACwB;IACnC,MAAM,MAAM,GAAG,mBAAmB,CAAC;QACjC,SAAS;QACT,KAAK;KACN,CAAC,CAAC;IAEH,MAAM,kBAAkB,GAAG,KAAK,IAAI,EAAE;QACpC,IAAI,QAAQ;YAAE,OAAO,QAAQ,CAAC;QAE9B,uEAAuE;QACvE,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC;QAC/C,mFAAmF;QACnF,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;aAC3D,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;aACpC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACb,MAAM,OAAO,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,OAAO,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;YAE/B,OAAO,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEL,OAAO,SAAS,CAAC;YACf,cAAc;YACd,kBAAkB,CAAC;gBACjB,GAAG,EAAE,gCAAgC;gBACrC,YAAY,EAAE,eAAe;gBAC7B,IAAI,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC;aACvB,CAAC;SACH,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,MAAM,OAAO,GAAG,MAAM,iBAAiB,CAAC;QACtC,MAAM;QACN,UAAU;QACV,cAAc;QACd,kBAAkB;KACnB,CAAC,CAAC;IAEH,MAAM,OAAO,GAAG,MAAM,sBAAsB,CAK1C;QACA,SAAS;QACT,KAAK;QACL,MAAM;QACN,GAAG,EAAE,yBAAyB;QAC9B,OAAO;QACP,IAAI,EAAE,wBAAwB;QAC9B,UAAU;QACV,cAAc,EAAE,OAAO;QACvB,kBAAkB;KACnB,CAAC,CAAC;IAEH,OAAO;QACL,GAAG,OAAO;QACV,kBAAkB,EAAE,CAAC,WAAsB,EAAE,cAAyB,EAAE,EAAE;YACxE,OAAO,kBAAkB,CAAC;gBACxB,GAAG,EAAE,yBAAyB;gBAC9B,YAAY,EAAE,cAAc;gBAC5B,IAAI,EAAE,CAAC,WAAW,EAAE,cAAc,CAAC;aACpC,CAAC,CAAC;QACL,CAAC;QACD,KAAK,CAAC,iBAAiB;YACrB,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC;gBAC3C,OAAO;gBACP,GAAG,EAAE,yBAAyB;gBAC9B,YAAY,EAAE,QAAQ;aACvB,CAAC,CAAC;YAEH,IAAI,UAAU,IAAI,IAAI,EAAE,CAAC;gBACvB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;YACnD,CAAC;YAED,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC;gBACpD,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;YACzE,CAAC;YAED,OAAO,UAAU,CAAC;QACpB,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import {\n  createBundlerClient,\n  getAccountAddress,\n  getEntryPoint,\n  type EntryPointDef,\n  type SmartAccountSigner,\n} from \"@aa-sdk/core\";\nimport {\n  concatHex,\n  encodeFunctionData,\n  hexToBigInt,\n  type Address,\n  type Chain,\n  type Hex,\n  type Transport,\n} from \"viem\";\nimport { MultiOwnerLightAccountAbi } from \"../abis/MultiOwnerLightAccountAbi.js\";\nimport { MultiOwnerLightAccountFactoryAbi } from \"../abis/MultiOwnerLightAccountFactoryAbi.js\";\nimport type {\n  LightAccountEntryPointVersion,\n  LightAccountVersion,\n} from \"../types.js\";\nimport {\n  defaultLightAccountVersion,\n  getDefaultMultiOwnerLightAccountFactoryAddress,\n} from \"../utils.js\";\nimport {\n  createLightAccountBase,\n  type CreateLightAccountBaseParams,\n  type LightAccountBase,\n} from \"./base.js\";\n\nexport type MultiOwnerLightAccount<\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TLightAccountVersion extends LightAccountVersion<\"MultiOwnerLightAccount\"> = LightAccountVersion<\"MultiOwnerLightAccount\">\n> = LightAccountBase<\n  TSigner,\n  \"MultiOwnerLightAccount\",\n  TLightAccountVersion\n> & {\n  encodeUpdateOwners: (\n    ownersToAdd: Address[],\n    ownersToRemove: Address[]\n  ) => Hex;\n  getOwnerAddresses: () => Promise<readonly Address[]>;\n};\n\nexport type CreateMultiOwnerLightAccountParams<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TLightAccountVersion extends LightAccountVersion<\"MultiOwnerLightAccount\"> = LightAccountVersion<\"MultiOwnerLightAccount\">\n> = Omit<\n  CreateLightAccountBaseParams<\n    \"MultiOwnerLightAccount\",\n    TLightAccountVersion,\n    TTransport,\n    TSigner\n  >,\n  | \"getAccountInitCode\"\n  | \"entryPoint\"\n  | \"version\"\n  | \"abi\"\n  | \"accountAddress\"\n  | \"type\"\n> & {\n  salt?: bigint;\n  initCode?: Hex;\n  accountAddress?: Address;\n  factoryAddress?: Address;\n  version?: TLightAccountVersion;\n  entryPoint?: EntryPointDef<\n    LightAccountEntryPointVersion<\n      \"MultiOwnerLightAccount\",\n      TLightAccountVersion\n    >,\n    Chain\n  >;\n  owners?: Address[];\n};\n\nexport async function createMultiOwnerLightAccount<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TLightAccountVersion extends LightAccountVersion<\"MultiOwnerLightAccount\"> = LightAccountVersion<\"MultiOwnerLightAccount\">\n>(\n  config: CreateMultiOwnerLightAccountParams<\n    TTransport,\n    TSigner,\n    TLightAccountVersion\n  >\n): Promise<MultiOwnerLightAccount<TSigner, TLightAccountVersion>>;\n\n/**\n * Creates a multi-owner light account using the provided parameters, including transport, chain, signer, initialization code, version, account address, factory address, salt, and owners. Ensures the owners list is deduplicated, ordered, and valid.\n *\n * @example\n * ```ts\n * import { createMultiOwnerLightAccount } from \"@account-kit/smart-contracts\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { sepolia } from \"viem/chains\";\n * import { http, generatePrivateKey } from \"viem\"\n *\n * const account = await createMultiOwnerLightAccount({\n *  chain: sepolia,\n *  transport: http(\"RPC_URL\"),\n *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())\n * });\n * ```\n *\n * @param {CreateMultiOwnerLightAccountParams} config The parameters for creating a multi-owner light account\n * @returns {Promise<MultiOwnerLightAccount>} A promise that resolves to a `MultiOwnerLightAccount` object containing the created account information and methods\n */\nexport async function createMultiOwnerLightAccount({\n  transport,\n  chain,\n  signer,\n  initCode,\n  version = defaultLightAccountVersion(),\n  entryPoint = getEntryPoint(chain, {\n    version: \"0.7.0\",\n  }),\n  accountAddress,\n  factoryAddress = getDefaultMultiOwnerLightAccountFactoryAddress(\n    chain,\n    version\n  ),\n  salt: salt_ = 0n,\n  owners = [],\n}: CreateMultiOwnerLightAccountParams): Promise<MultiOwnerLightAccount> {\n  const client = createBundlerClient({\n    transport,\n    chain,\n  });\n\n  const getAccountInitCode = async () => {\n    if (initCode) return initCode;\n\n    // NOTE: the current signer connected will be one of the owners as well\n    const ownerAddress = await signer.getAddress();\n    // owners need to be dedupe + ordered in ascending order and not == to zero address\n    const owners_ = Array.from(new Set([...owners, ownerAddress]))\n      .filter((x) => hexToBigInt(x) !== 0n)\n      .sort((a, b) => {\n        const bigintA = hexToBigInt(a);\n        const bigintB = hexToBigInt(b);\n\n        return bigintA < bigintB ? -1 : bigintA > bigintB ? 1 : 0;\n      });\n\n    return concatHex([\n      factoryAddress,\n      encodeFunctionData({\n        abi: MultiOwnerLightAccountFactoryAbi,\n        functionName: \"createAccount\",\n        args: [owners_, salt_],\n      }),\n    ]);\n  };\n\n  const address = await getAccountAddress({\n    client,\n    entryPoint,\n    accountAddress,\n    getAccountInitCode,\n  });\n\n  const account = await createLightAccountBase<\n    \"MultiOwnerLightAccount\",\n    LightAccountVersion<\"MultiOwnerLightAccount\">,\n    Transport,\n    SmartAccountSigner\n  >({\n    transport,\n    chain,\n    signer,\n    abi: MultiOwnerLightAccountAbi,\n    version,\n    type: \"MultiOwnerLightAccount\",\n    entryPoint,\n    accountAddress: address,\n    getAccountInitCode,\n  });\n\n  return {\n    ...account,\n    encodeUpdateOwners: (ownersToAdd: Address[], ownersToRemove: Address[]) => {\n      return encodeFunctionData({\n        abi: MultiOwnerLightAccountAbi,\n        functionName: \"updateOwners\",\n        args: [ownersToAdd, ownersToRemove],\n      });\n    },\n    async getOwnerAddresses(): Promise<readonly Address[]> {\n      const callResult = await client.readContract({\n        address,\n        abi: MultiOwnerLightAccountAbi,\n        functionName: \"owners\",\n      });\n\n      if (callResult == null) {\n        throw new Error(\"could not get on-chain owners\");\n      }\n\n      if (!callResult.includes(await signer.getAddress())) {\n        throw new Error(\"on-chain owners does not include the current signer\");\n      }\n\n      return callResult;\n    },\n  };\n}\n"]}