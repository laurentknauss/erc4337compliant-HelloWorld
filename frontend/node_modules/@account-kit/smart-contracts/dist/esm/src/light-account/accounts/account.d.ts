import { type Address, type EntryPointDef, type SmartAccountSigner } from "@aa-sdk/core";
import { type Chain, type Hex, type Transport } from "viem";
import type { LightAccountEntryPointVersion, LightAccountVersion } from "../types.js";
import { type CreateLightAccountBaseParams, type LightAccountBase } from "./base.js";
export type LightAccount<TSigner extends SmartAccountSigner = SmartAccountSigner, TLightAccountVersion extends LightAccountVersion<"LightAccount"> = LightAccountVersion<"LightAccount">> = LightAccountBase<TSigner, "LightAccount", TLightAccountVersion> & {
    encodeTransferOwnership: (newOwner: Address) => Hex;
    getOwnerAddress: () => Promise<Address>;
};
export type CreateLightAccountParams<TTransport extends Transport = Transport, TSigner extends SmartAccountSigner = SmartAccountSigner, TLightAccountVersion extends LightAccountVersion<"LightAccount"> = LightAccountVersion<"LightAccount">> = Omit<CreateLightAccountBaseParams<"LightAccount", TLightAccountVersion, TTransport, TSigner>, "getAccountInitCode" | "entryPoint" | "version" | "abi" | "accountAddress" | "type"> & {
    salt?: bigint;
    initCode?: Hex;
    accountAddress?: Address;
    factoryAddress?: Address;
    version?: TLightAccountVersion;
    entryPoint?: EntryPointDef<LightAccountEntryPointVersion<"LightAccount", TLightAccountVersion>, Chain>;
};
export declare function createLightAccount<TTransport extends Transport = Transport, TSigner extends SmartAccountSigner = SmartAccountSigner, TLightAccountVersion extends LightAccountVersion<"LightAccount"> = "v2.0.0">(config: CreateLightAccountParams<TTransport, TSigner, TLightAccountVersion>): Promise<LightAccount<TSigner, TLightAccountVersion>>;
