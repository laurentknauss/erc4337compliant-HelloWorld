{"version":3,"file":"alchemyClient.js","sourceRoot":"","sources":["../../../../../src/light-account/clients/alchemyClient.ts"],"names":[],"mappings":"AACA,OAAO,EACL,+BAA+B,GAGhC,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EACL,kBAAkB,EAClB,yBAAyB,GAI1B,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAc,MAAM,MAAM,CAAC;AAsBlC;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,KAAK,UAAU,+BAA+B,CAAC,EACpD,IAAI,EACJ,SAAS,EACT,KAAK,EACL,GAAG,MAAM,EACuB;IAChC,MAAM,OAAO,GAAG,MAAM,kBAAkB,CAAC;QACvC,GAAG,MAAM;QACT,SAAS;QACT,KAAK;KACN,CAAC,CAAC;IAEH,OAAO,+BAA+B,CAAC;QACrC,GAAG,MAAM;QACT,SAAS;QACT,KAAK;QACL,OAAO;QACP,IAAI;KACL,CAAC,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC;AACvC,CAAC","sourcesContent":["import type { HttpTransport, SmartAccountSigner } from \"@aa-sdk/core\";\nimport {\n  createAlchemySmartAccountClient,\n  type AlchemySmartAccountClient,\n  type AlchemySmartAccountClientConfig,\n} from \"@account-kit/infra\";\nimport {\n  createLightAccount,\n  lightAccountClientActions,\n  type CreateLightAccountParams,\n  type LightAccount,\n  type LightAccountClientActions,\n} from \"@account-kit/smart-contracts\";\nimport { type Chain } from \"viem\";\n\nexport type AlchemyLightAccountClientConfig<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = Omit<CreateLightAccountParams<HttpTransport, TSigner>, \"transport\"> &\n  Omit<\n    AlchemySmartAccountClientConfig<Chain, LightAccount<TSigner>>,\n    \"account\"\n  >;\n\nexport async function createLightAccountAlchemyClient<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  params: AlchemyLightAccountClientConfig<TSigner>\n): Promise<\n  AlchemySmartAccountClient<\n    Chain | undefined,\n    LightAccount<TSigner>,\n    LightAccountClientActions<TSigner>\n  >\n>;\n\n/**\n * Creates an Alchemy smart account client connected to a Light Account instance.\n *\n * @example\n * ```ts\n * import { createLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n * import { sepolia, alchemy } from \"@account-kit/infra\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { generatePrivateKey } from \"viem\"\n *\n * const lightAccountClient = await createLightAccountAlchemyClient({\n *  transport: alchemy({ apiKey: \"your-api-key\" }),\n *  chain: sepolia,\n *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())\n * });\n * ```\n *\n * @param {AlchemyLightAccountClientConfig} config The configuration for setting up the Alchemy Light Account Client\n * @returns {Promise<AlchemySmartAccountClient>} A promise that resolves to an `AlchemySmartAccountClient` object containing the created client\n */\nexport async function createLightAccountAlchemyClient({\n  opts,\n  transport,\n  chain,\n  ...config\n}: AlchemyLightAccountClientConfig): Promise<AlchemySmartAccountClient> {\n  const account = await createLightAccount({\n    ...config,\n    transport,\n    chain,\n  });\n\n  return createAlchemySmartAccountClient({\n    ...config,\n    transport,\n    chain,\n    account,\n    opts,\n  }).extend(lightAccountClientActions);\n}\n"]}