{"version":3,"file":"installPlugin.js","sourceRoot":"","sources":["../../../../../src/msca/plugin-manager/installPlugin.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,oBAAoB,EACpB,uBAAuB,EACvB,oBAAoB,GAOrB,MAAM,cAAc,CAAC;AACtB,OAAO,EACL,kBAAkB,EAClB,oBAAoB,EACpB,SAAS,GAMV,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAoB9D;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa,CAUjC,MAA4C,EAC5C,EACE,SAAS,EACT,OAAO,EACP,OAAO,GAAG,MAAM,CAAC,OAAO,EACxB,GAAG,MAAM,EAC+B;IAE1C,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,oBAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,uBAAuB,CAC/B,oBAAoB,EACpB,eAAe,EACf,MAAM,CACP,CAAC;IACJ,CAAC;IAED,MAAM,QAAQ,GAAG,MAAM,gCAAgC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAExE,OAAO,MAAM,CAAC,iBAAiB,CAAC;QAC9B,EAAE,EAAE,QAAQ;QACZ,SAAS;QACT,OAAO;QACP,OAAO;KACR,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gCAAgC,CAOpD,MAAwD,EACxD,MAAsE;IAEtE,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC;QAC/C,GAAG,EAAE,UAAU;QACf,OAAO,EAAE,MAAM,CAAC,aAAa;QAC7B,YAAY,EAAE,gBAAgB;KAC/B,CAAC,CAAC;IACH,4DAA4D;IAC5D,MAAM,YAAY,GAChB,MAAM,CAAC,YAAY;QACnB,SAAS,CACP,oBAAoB,CAAC;YACnB,GAAG,EAAE,UAAU;YACf,YAAY,EAAE,gBAAgB;YAC9B,MAAM,EAAE,cAAc;SACvB,CAAC,CACH,CAAC;IACJ,OAAO,kBAAkB,CAAC;QACxB,GAAG,EAAE,iBAAiB;QACtB,YAAY,EAAE,eAAe;QAC7B,IAAI,EAAE;YACJ,MAAM,CAAC,aAAa;YACpB,YAAY;YACZ,MAAM,CAAC,cAAc,IAAI,IAAI;YAC7B,MAAM,CAAC,YAAY,IAAI,EAAE;SAC1B;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {\n  AccountNotFoundError,\n  IncompatibleClientError,\n  isSmartAccountClient,\n  type GetAccountParameter,\n  type GetContextParameter,\n  type GetEntryPointFromAccount,\n  type SmartAccountClient,\n  type SmartContractAccount,\n  type UserOperationOverridesParameter,\n} from \"@aa-sdk/core\";\nimport {\n  encodeFunctionData,\n  encodeFunctionResult,\n  keccak256,\n  type Address,\n  type Chain,\n  type Client,\n  type Hash,\n  type Transport,\n} from \"viem\";\nimport { IPluginAbi } from \"../abis/IPlugin.js\";\nimport { IPluginManagerAbi } from \"../abis/IPluginManager.js\";\nimport type { FunctionReference } from \"../account-loupe/types.js\";\n\nexport type InstallPluginParams<\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends Record<string, unknown> | undefined =\n    | Record<string, unknown>\n    | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n> = {\n  pluginAddress: Address;\n  manifestHash?: Hash;\n  pluginInitData?: Hash;\n  dependencies?: FunctionReference[];\n} & UserOperationOverridesParameter<TEntryPointVersion> &\n  GetAccountParameter<TAccount> &\n  GetContextParameter<TContext>;\n\n/**\n * Installs a plugin on a smart account via the client, sending the user operation with the appropriate parameters.\n * NOTE: it's recommended to just use the installPlugin action returned from generated plugins\n *\n * @example\n * ```ts\n * import { installPlugin, createModularAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n *\n * const client = createModularAccountAlchemyClient(...);\n *\n * const hash = await installPlugin(client, {\n *  pluginAddress: \"0x...\",\n *  manifestHash: \"0x...\",\n *  dependencies: [], // this is defined by the plugin you're installing\n * });\n * ```\n *\n * @param {Client<TTransport, TChain, TAccount>} client The client configured to the smart account on which the plugin will be installed\n * @param {InstallPluginParams<TAccount, TContext>} params The parameters required to install the plugin, including overrides, context, and account information\n * @returns {Promise<any>} A promise that resolves once the plugin installation operation is sent\n */\nexport async function installPlugin<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends Record<string, unknown> | undefined =\n    | Record<string, unknown>\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  {\n    overrides,\n    context,\n    account = client.account,\n    ...params\n  }: InstallPluginParams<TAccount, TContext>\n) {\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  if (!isSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"SmartAccountClient\",\n      \"installPlugin\",\n      client\n    );\n  }\n\n  const callData = await encodeInstallPluginUserOperation(client, params);\n\n  return client.sendUserOperation({\n    uo: callData,\n    overrides,\n    account,\n    context,\n  });\n}\n\nexport async function encodeInstallPluginUserOperation<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: SmartAccountClient<TTransport, TChain, TAccount>,\n  params: Omit<InstallPluginParams, \"overrides\" | \"account\" | \"context\">\n) {\n  const pluginManifest = await client.readContract({\n    abi: IPluginAbi,\n    address: params.pluginAddress,\n    functionName: \"pluginManifest\",\n  });\n  // use the manifest hash passed in or get it from the plugin\n  const manifestHash: Hash =\n    params.manifestHash ??\n    keccak256(\n      encodeFunctionResult({\n        abi: IPluginAbi,\n        functionName: \"pluginManifest\",\n        result: pluginManifest,\n      })\n    );\n  return encodeFunctionData({\n    abi: IPluginManagerAbi,\n    functionName: \"installPlugin\",\n    args: [\n      params.pluginAddress,\n      manifestHash,\n      params.pluginInitData ?? \"0x\",\n      params.dependencies ?? [],\n    ],\n  });\n}\n"]}