{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/msca/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AccountNotFoundError,\n  ChainNotFoundError,\n  type GetAccountParameter,\n  type SmartAccountClient,\n  type SmartAccountSigner,\n  type SmartContractAccount,\n  type SmartContractAccountWithSigner,\n  type UpgradeToData,\n} from \"@aa-sdk/core\";\nimport {\n  arbitrum,\n  arbitrumSepolia,\n  base,\n  baseSepolia,\n  mainnet,\n  optimism,\n  optimismSepolia,\n  polygon,\n  polygonAmoy,\n  sepolia,\n} from \"@account-kit/infra\";\nimport type { Address, Chain, Transport } from \"viem\";\nimport {\n  custom,\n  encodeAbiParameters,\n  encodeFunctionData,\n  encodeFunctionResult,\n  keccak256,\n  parseAbiParameters,\n} from \"viem\";\nimport { IPluginAbi } from \"./abis/IPlugin.js\";\nimport { MultiOwnerModularAccountFactoryAbi } from \"./abis/MultiOwnerModularAccountFactory.js\";\nimport { UpgradeableModularAccountAbi } from \"./abis/UpgradeableModularAccount.js\";\nimport {\n  createMultiOwnerModularAccount,\n  type MultiOwnerModularAccount,\n} from \"./account/multiOwnerAccount.js\";\nimport { MultiOwnerPlugin } from \"./plugins/multi-owner/plugin.js\";\n\n/**\n * Utility method returning the default multi sig msca factory address given a chain\n *\n * @param {Chain} chain the chain object for which to get the address\n * @returns {Address} the address for the given chain\n * @throws if the chain doesn't have an address currently deployed\n */\nexport const getDefaultMultisigModularAccountFactoryAddress = (\n  chain: Chain\n): Address => {\n  switch (chain.id) {\n    case sepolia.id:\n    case baseSepolia.id:\n    case polygon.id:\n    case mainnet.id:\n    case polygonAmoy.id:\n    case optimism.id:\n    case optimismSepolia.id:\n    case arbitrum.id:\n    case arbitrumSepolia.id:\n    case base.id:\n    default:\n      return \"0x000000000000204327E6669f00901a57CE15aE15\";\n  }\n};\n\n/**\n * Utility method returning the default multi owner msca factory address given a chain\n *\n * @param {Chain} chain the chain object for which to get the address\n * @returns {Address} the address for the given chain\n * @throws if the chain doesn't have an address currently deployed\n */\nexport const getDefaultMultiOwnerModularAccountFactoryAddress = (\n  chain: Chain\n): Address => {\n  switch (chain.id) {\n    default:\n      return \"0x000000e92D78D90000007F0082006FDA09BD5f11\";\n  }\n};\n\nexport type GetMSCAUpgradeToData<\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TAccount extends\n    | SmartContractAccountWithSigner<string, TSigner>\n    | undefined = SmartContractAccountWithSigner<string, TSigner> | undefined\n> = {\n  multiOwnerPluginAddress?: Address;\n} & GetAccountParameter<TAccount>;\n\n/**\n * Retrieves the data necessary to upgrade to a Multi-Signature Contract Account (MSCA) and provides a method to create a Multi-Owner Modular Account.\n *\n * @example\n * ```ts\n * import { createLightAccountClient, getMSCAUpgradeToData } from \"@account-kit/smart-contracts\";\n *\n * const client = createLightAccountClient(...);\n * const upgradeData = await getMSCAUpgradeToData(client, {});\n * ```\n *\n * @param {SmartAccountClient<TTransport, TChain, TAccount>} client The smart account client\n * @param {GetMSCAUpgradeToData<TSigner, TAccount>} args The arguments required for the upgrade\n * @returns {Promise<UpgradeToData & { createMAAccount: () => Promise<MultiOwnerModularAccount<TSigner>>}>} A promise that resolves to upgrade data augmented with a function to create a Multi-Owner Modular Account\n */\nexport async function getMSCAUpgradeToData<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TAccount extends\n    | SmartContractAccountWithSigner<string, TSigner>\n    | undefined = SmartContractAccountWithSigner<string, TSigner> | undefined\n>(\n  client: SmartAccountClient<TTransport, TChain, TAccount>,\n  args: GetMSCAUpgradeToData<TSigner, TAccount>\n): Promise<\n  UpgradeToData & {\n    createMAAccount: () => Promise<MultiOwnerModularAccount<TSigner>>;\n  }\n> {\n  const { account: account_ = client.account, multiOwnerPluginAddress } = args;\n\n  if (!account_) {\n    throw new AccountNotFoundError();\n  }\n  const account = account_ as SmartContractAccountWithSigner<string, TSigner>;\n\n  const chain = client.chain;\n  if (!chain) {\n    throw new ChainNotFoundError();\n  }\n\n  const initData = await getMAInitializationData({\n    client,\n    multiOwnerPluginAddress,\n    signerAddress: await account.getSigner().getAddress(),\n  });\n\n  return {\n    ...initData,\n    createMAAccount: async () =>\n      createMultiOwnerModularAccount({\n        transport: custom(client.transport),\n        chain: chain as Chain,\n        signer: account.getSigner(),\n        accountAddress: account.address,\n      }),\n  };\n}\n\nexport type GetMAInitializationDataParams<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n> = {\n  multiOwnerPluginAddress?: Address;\n  client: SmartAccountClient<TTransport, TChain, TAccount>;\n  signerAddress: Address | Address[];\n};\n\n/**\n * Retrieves the initialization data for a multi-owner modular account. Throws an error if the client's chain is not found or if the multi-owner plugin address is not retrievable.\n *\n * @example\n * ```ts\n * import { getMAInitializationData } from \"@account-kit/smart-contracts\";\n * import { createSmartAccountClient } from \"@aa-sdk/core\";\n *\n * const client = createSmartAccountClient(...);\n * const initializationData = await getMAInitializationData({\n *  client,\n *  signerAddress: \"0x...\", // or array of signers\n * });\n * ```\n *\n * @param {GetMAInitializationDataParams<TTransport, TChain, TAccount>} params the parameters for getting initialization data\n * @param {SmartAccountClient<TTransport, TChain, TAccount>} params.client the smart account client\n * @param {Address | Address[]} params.signerAddress the address of the signer or an array of signer addresses\n * @param {Address} [params.multiOwnerPluginAddress] optional address of the multi-owner plugin\n * @returns {Promise<UpgradeToData>} a promise that resolves to the initialization data required for upgrading to a multi-owner modular account\n */\nexport async function getMAInitializationData<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>({\n  client,\n  multiOwnerPluginAddress,\n  signerAddress,\n}: GetMAInitializationDataParams<\n  TTransport,\n  TChain,\n  TAccount\n>): Promise<UpgradeToData> {\n  if (!client.chain) {\n    throw new ChainNotFoundError();\n  }\n\n  const factoryAddress = getDefaultMultiOwnerModularAccountFactoryAddress(\n    client.chain\n  );\n\n  const implAddress = await client.readContract({\n    abi: MultiOwnerModularAccountFactoryAbi,\n    address: factoryAddress,\n    functionName: \"IMPL\",\n  });\n\n  const multiOwnerAddress =\n    multiOwnerPluginAddress ?? MultiOwnerPlugin.meta.addresses[client.chain.id];\n\n  if (!multiOwnerAddress) {\n    throw new Error(\"could not get multi owner plugin address\");\n  }\n\n  const moPluginManifest = await client.readContract({\n    abi: IPluginAbi,\n    address: multiOwnerAddress,\n    functionName: \"pluginManifest\",\n  });\n\n  const hashedMultiOwnerPluginManifest = keccak256(\n    encodeFunctionResult({\n      abi: IPluginAbi,\n      functionName: \"pluginManifest\",\n      result: moPluginManifest,\n    })\n  );\n\n  const encodedOwner = encodeAbiParameters(\n    parseAbiParameters(\"address[]\"),\n    Array.isArray(signerAddress) ? [signerAddress] : [[signerAddress]]\n  );\n\n  const encodedPluginInitData = encodeAbiParameters(\n    parseAbiParameters(\"bytes32[], bytes[]\"),\n    [[hashedMultiOwnerPluginManifest], [encodedOwner]]\n  );\n\n  const encodedMSCAInitializeData = encodeFunctionData({\n    abi: UpgradeableModularAccountAbi,\n    functionName: \"initialize\",\n    args: [[multiOwnerAddress], encodedPluginInitData],\n  });\n\n  return {\n    implAddress,\n    initializationData: encodedMSCAInitializeData,\n  };\n}\n"]}