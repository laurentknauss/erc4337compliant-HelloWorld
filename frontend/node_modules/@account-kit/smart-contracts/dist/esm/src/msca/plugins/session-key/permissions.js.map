{"version":3,"file":"permissions.js","sourceRoot":"","sources":["../../../../../../src/msca/plugins/session-key/permissions.ts"],"names":[],"mappings":"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","sourcesContent":["import { encodeFunctionData, type Address, type Hex } from \"viem\";\nimport { SessionKeyPermissionsUpdatesAbi } from \"./SessionKeyPermissionsUpdatesAbi.js\";\n\nexport enum SessionKeyAccessListType {\n  ALLOWLIST = 0,\n  DENYLIST = 1,\n  ALLOW_ALL_ACCESS = 2,\n}\n\nexport type ContractAccessEntry = {\n  // The contract address to add or remove.\n  contractAddress: Address;\n  // Whether the contract address should be on the list.\n  isOnList: boolean;\n  // Whether to check selectors for the contract address.\n  checkSelectors: boolean;\n};\n\nexport type ContractMethodEntry = {\n  // The contract address to add or remove.\n  contractAddress: Address;\n  // The function selector to add or remove.\n  methodSelector: Hex;\n  // Whether the function selector should be on the list.\n  isOnList: boolean;\n};\n\nexport type TimeRange = {\n  validFrom: number;\n  validUntil: number;\n};\n\nexport type NativeTokenLimit = {\n  spendLimit: bigint;\n  // The time interval over which the spend limit is enforced. If unset, there is no time\n  /// interval by which the limit is refreshed.\n  refreshInterval?: number;\n};\n\nexport type Erc20TokenLimit = {\n  tokenAddress: Address;\n  spendLimit: bigint;\n  // The time interval over which the spend limit is enforced. If unset, there is no time\n  /// interval by which the limit is refreshed.\n  refreshInterval?: number;\n};\n\n// uint256 spendLimit, uint48 refreshInterval\nexport type GasSpendLimit = {\n  // The amount, in wei, of native tokens that a session key can spend on gas.\n  // Note that this is not the same as the gas limit for a user operation, which is measured in units of gas.\n  // This tracks gas units * gas price.\n  spendLimit: bigint;\n  // The time interval over which the spend limit is enforced. If unset, there is no time\n  /// interval by which the limit is refreshed.\n  refreshInterval?: number;\n};\n\n/**\n * A builder for creating the hex-encoded data for updating session key permissions.\n */\nexport class SessionKeyPermissionsBuilder {\n  private _contractAccessControlType: SessionKeyAccessListType =\n    SessionKeyAccessListType.ALLOWLIST;\n  private _contractAddressAccessEntrys: ContractAccessEntry[] = [];\n  private _contractMethodAccessEntrys: ContractMethodEntry[] = [];\n  private _timeRange?: TimeRange;\n  private _nativeTokenSpendLimit?: NativeTokenLimit;\n  private _erc20TokenSpendLimits: Erc20TokenLimit[] = [];\n  private _gasSpendLimit?: GasSpendLimit;\n  private _requiredPaymaster?: Address;\n\n  /**\n   * Sets the access control type for the contract and returns the current instance for method chaining.\n   *\n   * @example\n   * ```ts\n   * import { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n   *\n   * const builder = new SessionKeyPermissionsBuilder();\n   * builder.setContractAccessControlType(SessionKeyAccessListType.ALLOWLIST);\n   * ```\n   *\n   * @param {SessionKeyAccessListType} aclType The access control type for the session key\n   * @returns {SessionKeyPermissionsBuilder} The current instance for method chaining\n   */\n  public setContractAccessControlType(aclType: SessionKeyAccessListType) {\n    this._contractAccessControlType = aclType;\n    return this;\n  }\n\n  /**\n   * Adds a contract access entry to the internal list of contract address access entries.\n   *\n   * @example\n   * ```ts\n   * import { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n   *\n   * const builder = new SessionKeyPermissionsBuilder();\n   * builder.addContractAddressAccessEntry({\n   *  contractAddress: \"0x1234\",\n   *  isOnList: true,\n   *  checkSelectors: true,\n   * });\n   * ```\n   *\n   * @param {ContractAccessEntry} entry the contract access entry to be added\n   * @returns {SessionKeyPermissionsBuilder} the instance of the current class for chaining\n   */\n  public addContractAddressAccessEntry(entry: ContractAccessEntry) {\n    this._contractAddressAccessEntrys.push(entry);\n    return this;\n  }\n\n  /**\n   * Adds a contract method entry to the `_contractMethodAccessEntrys` array.\n   *\n   * @example\n   * ```ts\n   * import { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n   *\n   * const builder = new SessionKeyPermissionsBuilder();\n   * builder.addContractAddressAccessEntry({\n   *  contractAddress: \"0x1234\",\n   *  methodSelector: \"0x45678\",\n   *  isOnList: true,\n   * });\n   * ```\n   *\n   * @param {ContractMethodEntry} entry The contract method entry to be added\n   * @returns {SessionKeyPermissionsBuilder} The instance of the class for method chaining\n   */\n  public addContractFunctionAccessEntry(entry: ContractMethodEntry) {\n    this._contractMethodAccessEntrys.push(entry);\n    return this;\n  }\n\n  /**\n   * Sets the time range for an object and returns the object itself for chaining.\n   *\n   * @example\n   * ```ts\n   * import { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n   *\n   * const builder = new SessionKeyPermissionsBuilder();\n   * builder.setTimeRange({\n   *  validFrom: Date.now(),\n   *  validUntil: Date.now() + (15 * 60 * 1000),\n   * });\n   * ```\n   *\n   * @param {TimeRange} timeRange The time range to be set\n   * @returns {SessionKeyPermissionsBuilder} The current object for method chaining\n   */\n  public setTimeRange(timeRange: TimeRange) {\n    this._timeRange = timeRange;\n    return this;\n  }\n\n  /**\n   * Sets the native token spend limit and returns the instance for chaining.\n   *\n   * @example\n   * ```ts\n   * import { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n   *\n   * const builder = new SessionKeyPermissionsBuilder();\n   * builder.setNativeTokenSpendLimit({\n   *  spendLimit: 1000000000000000000n,\n   *  refreshInterval: 3600,\n   * });\n   * ```\n   *\n   * @param {NativeTokenLimit} limit The limit to set for native token spending\n   * @returns {SessionKeyPermissionsBuilder} The instance for chaining\n   */\n  public setNativeTokenSpendLimit(limit: NativeTokenLimit) {\n    this._nativeTokenSpendLimit = limit;\n    return this;\n  }\n\n  /**\n   * Adds an ERC20 token spend limit to the list of limits and returns the updated object.\n   *\n   * @example\n   * ```ts\n   * import { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n   *\n   * const builder = new SessionKeyPermissionsBuilder();\n   * builder.addErc20TokenSpendLimit({\n   *  tokenAddress: \"0x1234\",\n   *  spendLimit: 1000000000000000000n,\n   *  refreshInterval: 3600,\n   * });\n   * ```\n   *\n   * @param {Erc20TokenLimit} limit The ERC20 token spend limit to be added\n   * @returns {object} The updated object with the new ERC20 token spend limit\n   */\n  public addErc20TokenSpendLimit(limit: Erc20TokenLimit) {\n    this._erc20TokenSpendLimits.push(limit);\n    return this;\n  }\n\n  /**\n   * Sets the gas spend limit and returns the current instance for method chaining.\n   *\n   * @example\n   * ```ts\n   * import { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n   *\n   * const builder = new SessionKeyPermissionsBuilder();\n   * builder.setGasSpendLimit({\n   *  spendLimit: 1000000000000000000n,\n   *  refreshInterval: 3600,\n   * });\n   * ```\n   *\n   * @param {GasSpendLimit} limit - The gas spend limit to be set\n   * @returns {SessionKeyPermissionsBuilder} The current instance for chaining\n   */ public setGasSpendLimit(limit: GasSpendLimit) {\n    this._gasSpendLimit = limit;\n    return this;\n  }\n\n  /**\n   * Sets the required paymaster address.\n   *\n   * @example\n   * ```ts\n   * import { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n   *\n   * const builder = new SessionKeyPermissionsBuilder();\n   * builder.setRequiredPaymaster(\"0x1234\");\n   * ```\n   *\n   * @param {Address} paymaster the address of the paymaster to be set\n   * @returns {SessionKeyPermissionsBuilder} the current instance for method chaining\n   */\n  public setRequiredPaymaster(paymaster: Address) {\n    this._requiredPaymaster = paymaster;\n    return this;\n  }\n\n  /**\n   * Encodes various function calls into an array of hexadecimal strings based on the provided permissions and limits.\n   *\n   * @example\n   * ```ts\n   * import { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n   *\n   * const builder = new SessionKeyPermissionsBuilder();\n   * builder.setRequiredPaymaster(\"0x1234\");\n   * const encoded = builder.encode();\n   * ```\n   *\n   * @returns {Hex[]} An array of encoded hexadecimal strings representing the function calls for setting access control, permissions, and limits.\n   */\n  public encode(): Hex[] {\n    return [\n      encodeFunctionData({\n        abi: SessionKeyPermissionsUpdatesAbi,\n        functionName: \"setAccessListType\",\n        args: [this._contractAccessControlType],\n      }),\n      ...this._contractAddressAccessEntrys.map((entry) =>\n        encodeFunctionData({\n          abi: SessionKeyPermissionsUpdatesAbi,\n          functionName: \"updateAccessListAddressEntry\",\n          args: [entry.contractAddress, entry.isOnList, entry.checkSelectors],\n        })\n      ),\n      ...this._contractMethodAccessEntrys.map((entry) =>\n        encodeFunctionData({\n          abi: SessionKeyPermissionsUpdatesAbi,\n          functionName: \"updateAccessListFunctionEntry\",\n          args: [entry.contractAddress, entry.methodSelector, entry.isOnList],\n        })\n      ),\n      this.encodeIfDefined(\n        (timeRange) =>\n          encodeFunctionData({\n            abi: SessionKeyPermissionsUpdatesAbi,\n            functionName: \"updateTimeRange\",\n            args: [timeRange.validFrom, timeRange.validUntil],\n          }),\n        this._timeRange\n      ),\n      this.encodeIfDefined(\n        (nativeSpendLimit) =>\n          encodeFunctionData({\n            abi: SessionKeyPermissionsUpdatesAbi,\n            functionName: \"setNativeTokenSpendLimit\",\n            args: [\n              nativeSpendLimit.spendLimit,\n              nativeSpendLimit.refreshInterval ?? 0,\n            ],\n          }),\n        this._nativeTokenSpendLimit\n      ),\n      ...this._erc20TokenSpendLimits.map((erc20SpendLimit) =>\n        encodeFunctionData({\n          abi: SessionKeyPermissionsUpdatesAbi,\n          functionName: \"setERC20SpendLimit\",\n          args: [\n            erc20SpendLimit.tokenAddress,\n            erc20SpendLimit.spendLimit,\n            erc20SpendLimit.refreshInterval ?? 0,\n          ],\n        })\n      ),\n      this.encodeIfDefined(\n        (spendLimit) =>\n          encodeFunctionData({\n            abi: SessionKeyPermissionsUpdatesAbi,\n            functionName: \"setGasSpendLimit\",\n            args: [spendLimit.spendLimit, spendLimit.refreshInterval ?? 0],\n          }),\n        this._gasSpendLimit\n      ),\n      this.encodeIfDefined(\n        (paymaster) =>\n          encodeFunctionData({\n            abi: SessionKeyPermissionsUpdatesAbi,\n            functionName: \"setRequiredPaymaster\",\n            args: [paymaster],\n          }),\n        this._requiredPaymaster\n      ),\n    ].filter((x) => x !== \"0x\");\n  }\n\n  private encodeIfDefined<T>(encode: (param: T) => Hex, param?: T): Hex {\n    if (!param) return \"0x\";\n\n    return encode(param);\n  }\n}\n"]}