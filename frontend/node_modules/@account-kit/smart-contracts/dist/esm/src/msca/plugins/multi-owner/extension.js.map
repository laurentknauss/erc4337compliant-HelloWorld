{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../../../src/msca/plugins/multi-owner/extension.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,oBAAoB,GAIrB,MAAM,cAAc,CAAC;AACtB,OAAO,EAAyD,MAAM,MAAM,CAAC;AAE7E,OAAO,EACL,gBAAgB,EAChB,uBAAuB,IAAI,wBAAwB,GAEpD,MAAM,aAAa,CAAC;AAuBrB;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAQK,CAOvC,MAA4C,EAC5C,EAAE,CAAC,CAAC;IACJ,GAAG,wBAAwB,CAAC,MAAM,CAAC;IACnC,KAAK,CAAC,UAAU,CACd,IAA+D;QAE/D,MAAM,OAAO,GAAG,IAAI,EAAE,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC;QAChD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,oBAAoB,EAAE,CAAC;QACnC,CAAC;QACD,+DAA+D;QAC/D,4FAA4F;QAC5F,MAAM,QAAQ,GAAG,gBAAgB,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAC3E,OAAO,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,SAAS,CACb,IAC+B;QAE/B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC;QAC/C,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,oBAAoB,EAAE,CAAC;QACnC,CAAC;QACD,+DAA+D;QAC/D,4FAA4F;QAC5F,MAAM,QAAQ,GAAG,gBAAgB,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC1E,OAAO,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAClE,CAAC;CACF,CAAC,CAAC","sourcesContent":["import {\n  AccountNotFoundError,\n  type GetAccountParameter,\n  type IsUndefined,\n  type SmartContractAccount,\n} from \"@aa-sdk/core\";\nimport { type Address, type Chain, type Client, type Transport } from \"viem\";\nimport type { GetPluginAddressParameter } from \"../types.js\";\nimport {\n  MultiOwnerPlugin,\n  multiOwnerPluginActions as multiOwnerPluginActions_,\n  type MultiOwnerPluginActions as MultiOwnerPluginActions_,\n} from \"./plugin.js\";\n\nexport type MultiOwnerPluginActions<\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n> = MultiOwnerPluginActions_<TAccount, undefined> & {\n  readOwners: (\n    params: GetPluginAddressParameter & GetAccountParameter<TAccount>\n  ) => Promise<ReadonlyArray<Address>>;\n\n  isOwnerOf: (\n    params: { address: Address } & GetPluginAddressParameter &\n      GetAccountParameter<TAccount>\n  ) => Promise<boolean>;\n} & (IsUndefined<TAccount> extends false\n    ? {\n        readOwners: (\n          params?: GetPluginAddressParameter & GetAccountParameter<TAccount>\n        ) => Promise<ReadonlyArray<Address>>;\n      }\n    : {});\n\n/**\n * Creates actions for the MultiOwner plugin, including reading owners and checking ownership.\n * NOTE: this is already added to the client returned from createMultiOwnerModularAccountClient\n *\n * @example\n * ```ts\n * import { multiOwnerPluginActions } from \"@account-kit/smart-contracts\";\n * import { createSmartAccountClient } from \"@aa-sdk/core\";\n *\n * const client = createSmartAccountClient(...).extend(multiOwnerPluginActions);\n * ```\n *\n * @param {Client<TTransport, TChain, TAccount>} client the client instance containing the transport, chain, and account information\n * @returns {MultiOwnerPluginActions<TAccount>} an object containing the actions for the MultiOwner plugin, such as `readOwners` and `isOwnerOf`\n */\nexport const multiOwnerPluginActions: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>\n) => MultiOwnerPluginActions<TAccount> = <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>\n) => ({\n  ...multiOwnerPluginActions_(client),\n  async readOwners(\n    args: GetPluginAddressParameter & GetAccountParameter<TAccount>\n  ) {\n    const account = args?.account ?? client.account;\n    if (!account) {\n      throw new AccountNotFoundError();\n    }\n    // TODO: check if the account actually has the plugin installed\n    // either via account loupe or checking if the supports interface call passes on the account\n    const contract = MultiOwnerPlugin.getContract(client, args?.pluginAddress);\n    return contract.read.ownersOf([account.address]);\n  },\n\n  async isOwnerOf(\n    args: { address: Address } & GetPluginAddressParameter &\n      GetAccountParameter<TAccount>\n  ) {\n    const account = args.account ?? client.account;\n    if (!account) {\n      throw new AccountNotFoundError();\n    }\n    // TODO: check if the account actually has the plugin installed\n    // either via account loupe or checking if the supports interface call passes on the account\n    const contract = MultiOwnerPlugin.getContract(client, args.pluginAddress);\n    return contract.read.isOwnerOf([account.address, args.address]);\n  },\n});\n"]}