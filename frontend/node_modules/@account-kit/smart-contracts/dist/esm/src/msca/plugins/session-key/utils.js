import { AccountNotFoundError } from "@aa-sdk/core";
import { SessionKeyPlugin } from "./plugin.js";
/**
 * Finds predecessors for each provided key and returns them in the struct `ISessionKeyPlugin.SessionKeyToRemove[]`.
 *
 * @example
 * ```ts
 * import { buildSessionKeysToRemoveStruct } from "@account-kit/smart-contracts";
 *
 * const client = createSmartAccountClient(...);
 *
 * const keysToRemove = await buildSessionKeysToRemoveStruct(client, {
 *  keys: ["0x...", "0x..."],
 * });
 * ```
 *
 * @param {Client<TTransport, TChain, TAccount>} client The client instance used to interact with the smart account
 * @param {BuildSessionKeysToRemoveStructParams<TAccount>} args Arguments to configure the session key removal process
 * @returns {Promise<{ sessionKey: Address; predecessor: Address }[]>} A promise that resolves to an array of objects each containing a session key and its predecessor
 */
export async function buildSessionKeysToRemoveStruct(client, args) {
    const { keys, pluginAddress, account = client.account } = args;
    if (!account)
        throw new AccountNotFoundError();
    const contract = SessionKeyPlugin.getContract(client, pluginAddress);
    return (await Promise.all(keys.map(async (key) => {
        return [
            key,
            await contract.read.findPredecessor([account.address, key]),
        ];
    }))).map(([key, predecessor]) => ({
        sessionKey: key,
        predecessor,
    }));
}
//# sourceMappingURL=utils.js.map