{"version":3,"file":"getSignerType.js","sourceRoot":"","sources":["../../../../../../../src/msca/plugins/multisig/utils/getSignerType.ts"],"names":[],"mappings":"AACA,OAAO,EAML,IAAI,GAEL,MAAM,MAAM,CAAC;AAsBd;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAGhC,EACA,MAAM,EACN,SAAS,EACT,MAAM,GACkC,EAAuB,EAAE;IACjE,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC;IAChD,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC,CAAC;IAEtE,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;QAC1D,CAAC,CAAC,KAAK;QACP,CAAC,CAAC,UAAU,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import type { SmartAccountSigner, SmartContractAccount } from \"@aa-sdk/core\";\nimport {\n  type Chain,\n  type Client,\n  type Hex,\n  type PublicActions,\n  type PublicRpcSchema,\n  size,\n  type Transport,\n} from \"viem\";\nimport type { SignerType } from \"../types\";\n\ntype GetSignerTypeParams<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TClient extends Client<\n    TTransport,\n    TChain,\n    TAccount,\n    PublicRpcSchema,\n    PublicActions\n  > = Client<TTransport, TChain, TAccount, PublicRpcSchema, PublicActions>\n> = {\n  signer: SmartAccountSigner<any>;\n  signature: Hex;\n  client: TClient;\n};\n\n/**\n * Determines the type of signer (Externally Owned Account (EOA) or CONTRACT) based on the provided client, signature, and signer.\n *\n * @example\n * ```ts\n * import { getSignerType } from \"@account-kit/smart-contracts\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { createPublicClient, generatePrivateKey } from \"viem\";\n *\n * const signer = LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey());\n * const client = createPublicClient(...);\n * const signature = signer.signMessage(\"Hello World\");\n *\n * const signerType = await getSignerType({ client, signature, signer }); // EOA\n * ```\n *\n * @param {GetSignerTypeParams<TTransport, TChain>} params the parameters including the client, signature, and signer\n * @returns {Promise<SignerType>} A promise that resolves to the signer type, which is either \"EOA\" or \"CONTRACT\"\n */\nexport const getSignerType = async <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined\n>({\n  client,\n  signature,\n  signer,\n}: GetSignerTypeParams<TTransport, TChain>): Promise<SignerType> => {\n  const signerAddress = await signer.getAddress();\n  const byteCode = await client.getBytecode({ address: signerAddress });\n\n  return (byteCode ?? \"0x\") === \"0x\" && size(signature) === 65\n    ? \"EOA\"\n    : \"CONTRACT\";\n};\n"]}