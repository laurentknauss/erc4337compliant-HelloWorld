import { encodeFunctionData } from "viem";
import { SessionKeyPermissionsUpdatesAbi } from "./SessionKeyPermissionsUpdatesAbi.js";
export var SessionKeyAccessListType;
(function (SessionKeyAccessListType) {
    SessionKeyAccessListType[SessionKeyAccessListType["ALLOWLIST"] = 0] = "ALLOWLIST";
    SessionKeyAccessListType[SessionKeyAccessListType["DENYLIST"] = 1] = "DENYLIST";
    SessionKeyAccessListType[SessionKeyAccessListType["ALLOW_ALL_ACCESS"] = 2] = "ALLOW_ALL_ACCESS";
})(SessionKeyAccessListType || (SessionKeyAccessListType = {}));
/**
 * A builder for creating the hex-encoded data for updating session key permissions.
 */
export class SessionKeyPermissionsBuilder {
    constructor() {
        Object.defineProperty(this, "_contractAccessControlType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: SessionKeyAccessListType.ALLOWLIST
        });
        Object.defineProperty(this, "_contractAddressAccessEntrys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_contractMethodAccessEntrys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_timeRange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nativeTokenSpendLimit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_erc20TokenSpendLimits", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_gasSpendLimit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_requiredPaymaster", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    /**
     * Sets the access control type for the contract and returns the current instance for method chaining.
     *
     * @example
     * ```ts
     * import { SessionKeyPermissionsBuilder } from "@account-kit/smart-contracts";
     *
     * const builder = new SessionKeyPermissionsBuilder();
     * builder.setContractAccessControlType(SessionKeyAccessListType.ALLOWLIST);
     * ```
     *
     * @param {SessionKeyAccessListType} aclType The access control type for the session key
     * @returns {SessionKeyPermissionsBuilder} The current instance for method chaining
     */
    setContractAccessControlType(aclType) {
        this._contractAccessControlType = aclType;
        return this;
    }
    /**
     * Adds a contract access entry to the internal list of contract address access entries.
     *
     * @example
     * ```ts
     * import { SessionKeyPermissionsBuilder } from "@account-kit/smart-contracts";
     *
     * const builder = new SessionKeyPermissionsBuilder();
     * builder.addContractAddressAccessEntry({
     *  contractAddress: "0x1234",
     *  isOnList: true,
     *  checkSelectors: true,
     * });
     * ```
     *
     * @param {ContractAccessEntry} entry the contract access entry to be added
     * @returns {SessionKeyPermissionsBuilder} the instance of the current class for chaining
     */
    addContractAddressAccessEntry(entry) {
        this._contractAddressAccessEntrys.push(entry);
        return this;
    }
    /**
     * Adds a contract method entry to the `_contractMethodAccessEntrys` array.
     *
     * @example
     * ```ts
     * import { SessionKeyPermissionsBuilder } from "@account-kit/smart-contracts";
     *
     * const builder = new SessionKeyPermissionsBuilder();
     * builder.addContractAddressAccessEntry({
     *  contractAddress: "0x1234",
     *  methodSelector: "0x45678",
     *  isOnList: true,
     * });
     * ```
     *
     * @param {ContractMethodEntry} entry The contract method entry to be added
     * @returns {SessionKeyPermissionsBuilder} The instance of the class for method chaining
     */
    addContractFunctionAccessEntry(entry) {
        this._contractMethodAccessEntrys.push(entry);
        return this;
    }
    /**
     * Sets the time range for an object and returns the object itself for chaining.
     *
     * @example
     * ```ts
     * import { SessionKeyPermissionsBuilder } from "@account-kit/smart-contracts";
     *
     * const builder = new SessionKeyPermissionsBuilder();
     * builder.setTimeRange({
     *  validFrom: Date.now(),
     *  validUntil: Date.now() + (15 * 60 * 1000),
     * });
     * ```
     *
     * @param {TimeRange} timeRange The time range to be set
     * @returns {SessionKeyPermissionsBuilder} The current object for method chaining
     */
    setTimeRange(timeRange) {
        this._timeRange = timeRange;
        return this;
    }
    /**
     * Sets the native token spend limit and returns the instance for chaining.
     *
     * @example
     * ```ts
     * import { SessionKeyPermissionsBuilder } from "@account-kit/smart-contracts";
     *
     * const builder = new SessionKeyPermissionsBuilder();
     * builder.setNativeTokenSpendLimit({
     *  spendLimit: 1000000000000000000n,
     *  refreshInterval: 3600,
     * });
     * ```
     *
     * @param {NativeTokenLimit} limit The limit to set for native token spending
     * @returns {SessionKeyPermissionsBuilder} The instance for chaining
     */
    setNativeTokenSpendLimit(limit) {
        this._nativeTokenSpendLimit = limit;
        return this;
    }
    /**
     * Adds an ERC20 token spend limit to the list of limits and returns the updated object.
     *
     * @example
     * ```ts
     * import { SessionKeyPermissionsBuilder } from "@account-kit/smart-contracts";
     *
     * const builder = new SessionKeyPermissionsBuilder();
     * builder.addErc20TokenSpendLimit({
     *  tokenAddress: "0x1234",
     *  spendLimit: 1000000000000000000n,
     *  refreshInterval: 3600,
     * });
     * ```
     *
     * @param {Erc20TokenLimit} limit The ERC20 token spend limit to be added
     * @returns {object} The updated object with the new ERC20 token spend limit
     */
    addErc20TokenSpendLimit(limit) {
        this._erc20TokenSpendLimits.push(limit);
        return this;
    }
    /**
     * Sets the gas spend limit and returns the current instance for method chaining.
     *
     * @example
     * ```ts
     * import { SessionKeyPermissionsBuilder } from "@account-kit/smart-contracts";
     *
     * const builder = new SessionKeyPermissionsBuilder();
     * builder.setGasSpendLimit({
     *  spendLimit: 1000000000000000000n,
     *  refreshInterval: 3600,
     * });
     * ```
     *
     * @param {GasSpendLimit} limit - The gas spend limit to be set
     * @returns {SessionKeyPermissionsBuilder} The current instance for chaining
     */ setGasSpendLimit(limit) {
        this._gasSpendLimit = limit;
        return this;
    }
    /**
     * Sets the required paymaster address.
     *
     * @example
     * ```ts
     * import { SessionKeyPermissionsBuilder } from "@account-kit/smart-contracts";
     *
     * const builder = new SessionKeyPermissionsBuilder();
     * builder.setRequiredPaymaster("0x1234");
     * ```
     *
     * @param {Address} paymaster the address of the paymaster to be set
     * @returns {SessionKeyPermissionsBuilder} the current instance for method chaining
     */
    setRequiredPaymaster(paymaster) {
        this._requiredPaymaster = paymaster;
        return this;
    }
    /**
     * Encodes various function calls into an array of hexadecimal strings based on the provided permissions and limits.
     *
     * @example
     * ```ts
     * import { SessionKeyPermissionsBuilder } from "@account-kit/smart-contracts";
     *
     * const builder = new SessionKeyPermissionsBuilder();
     * builder.setRequiredPaymaster("0x1234");
     * const encoded = builder.encode();
     * ```
     *
     * @returns {Hex[]} An array of encoded hexadecimal strings representing the function calls for setting access control, permissions, and limits.
     */
    encode() {
        return [
            encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "setAccessListType",
                args: [this._contractAccessControlType],
            }),
            ...this._contractAddressAccessEntrys.map((entry) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "updateAccessListAddressEntry",
                args: [entry.contractAddress, entry.isOnList, entry.checkSelectors],
            })),
            ...this._contractMethodAccessEntrys.map((entry) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "updateAccessListFunctionEntry",
                args: [entry.contractAddress, entry.methodSelector, entry.isOnList],
            })),
            this.encodeIfDefined((timeRange) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "updateTimeRange",
                args: [timeRange.validFrom, timeRange.validUntil],
            }), this._timeRange),
            this.encodeIfDefined((nativeSpendLimit) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "setNativeTokenSpendLimit",
                args: [
                    nativeSpendLimit.spendLimit,
                    nativeSpendLimit.refreshInterval ?? 0,
                ],
            }), this._nativeTokenSpendLimit),
            ...this._erc20TokenSpendLimits.map((erc20SpendLimit) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "setERC20SpendLimit",
                args: [
                    erc20SpendLimit.tokenAddress,
                    erc20SpendLimit.spendLimit,
                    erc20SpendLimit.refreshInterval ?? 0,
                ],
            })),
            this.encodeIfDefined((spendLimit) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "setGasSpendLimit",
                args: [spendLimit.spendLimit, spendLimit.refreshInterval ?? 0],
            }), this._gasSpendLimit),
            this.encodeIfDefined((paymaster) => encodeFunctionData({
                abi: SessionKeyPermissionsUpdatesAbi,
                functionName: "setRequiredPaymaster",
                args: [paymaster],
            }), this._requiredPaymaster),
        ].filter((x) => x !== "0x");
    }
    encodeIfDefined(encode, param) {
        if (!param)
            return "0x";
        return encode(param);
    }
}
//# sourceMappingURL=permissions.js.map