import { createAlchemySmartAccountClient, } from "@account-kit/infra";
import { accountLoupeActions, createMultiOwnerModularAccount, multiOwnerPluginActions, pluginManagerActions, } from "@account-kit/smart-contracts";
import {} from "viem";
/**
 * Creates a modular account Alchemy client with the provided configuration.
 *
 * @example
 * ```ts
 * import { createModularAccountAlchemyClient } from "@account-kit/smart-contracts";
 * import { sepolia, alchemy } from "@account-kit/infra";
 * import { LocalAccountSigner } from "@aa-sdk/core";
 * import { generatePrivateKey } from "viem"
 *
 * const alchemyAccountClient = await createModularAccountAlchemyClient({
 *  transport: alchemy({ apiKey: "your-api-key" }),
 *  chain: sepolia,
 *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())
 * });
 * ```
 *
 * @param {AlchemyModularAccountClientConfig} config The configuration for creating the Alchemy client
 * @returns {Promise<AlchemySmartAccountClient>} A promise that resolves to an `AlchemySmartAccountClient` configured with the desired plugins and actions
 */
export async function createModularAccountAlchemyClient(config) {
    const { transport, chain, opts } = config;
    const account = await createMultiOwnerModularAccount({
        ...config,
        transport,
        chain,
    });
    return createAlchemySmartAccountClient({
        ...config,
        account,
        opts,
    })
        .extend(multiOwnerPluginActions)
        .extend(pluginManagerActions)
        .extend(accountLoupeActions);
}
//# sourceMappingURL=alchemyClient.js.map