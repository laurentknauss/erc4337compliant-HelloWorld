{"version":3,"file":"decorator.js","sourceRoot":"","sources":["../../../../../src/msca/account-loupe/decorator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AccountNotFoundError,\n  IncompatibleClientError,\n  isSmartAccountClient,\n  type GetAccountParameter,\n  type SmartContractAccount,\n} from \"@aa-sdk/core\";\nimport type { Address, Chain, Client, Hash, Transport } from \"viem\";\nimport { IAccountLoupeAbi } from \"../abis/IAccountLoupe.js\";\nimport type {\n  ExecutionFunctionConfig,\n  ExecutionHooks,\n  FunctionReference,\n  PreValidationHooks,\n} from \"./types.js\";\n\nexport type AccountLoupeActions<\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n> = {\n  /// @notice Gets the validation functions and plugin address for a selector\n  /// @dev If the selector is a native function, the plugin address will be the address of the account\n  /// @param selector The selector to get the configuration for\n  /// @return The configuration for this selector\n  getExecutionFunctionConfig(\n    args: { selector: FunctionReference } & GetAccountParameter<TAccount>\n  ): Promise<ExecutionFunctionConfig>;\n\n  /// @notice Gets the pre and post execution hooks for a selector\n  /// @param selector The selector to get the hooks for\n  /// @return The pre and post execution hooks for this selector\n  getExecutionHooks(\n    args: {\n      selector: FunctionReference;\n    } & GetAccountParameter<TAccount>\n  ): Promise<ReadonlyArray<ExecutionHooks>>;\n\n  /// @notice Gets the pre user op and runtime validation hooks associated with a selector\n  /// @param selector The selector to get the hooks for\n  /// @return preUserOpValidationHooks The pre user op validation hooks for this selector\n  /// @return preRuntimeValidationHooks The pre runtime validation hooks for this selector\n  getPreValidationHooks(\n    args: { selector: Hash } & GetAccountParameter<TAccount>\n  ): Promise<Readonly<PreValidationHooks>>;\n\n  /// @notice Gets an array of all installed plugins\n  /// @return The addresses of all installed plugins\n  getInstalledPlugins(\n    args: GetAccountParameter<TAccount>\n  ): Promise<ReadonlyArray<Address>>;\n};\n\n/**\n * Provides a set of actions for account loupe operations using the specified client.\n * NOTE: this is already added to the client when using any of the Modular Account Clients.\n *\n * @example\n * ```ts\n * import { accountLoupeActions } from \"@account-kit/smart-contracts\";\n * import { createSmartAccountClient } from \"@aa-sdk/core\";\n *\n * const client = createSmartAccountClient(...).extend(accountLoupeActions);\n * ```\n *\n * @param {Client<TTransport, TChain, TAccount>} client the client to be used for executing the account loupe actions\n * @returns {AccountLoupeActions<TAccount>} an object containing account loupe actions like `getExecutionFunctionConfig`, `getExecutionHooks`, `getPreValidationHooks`, and `getInstalledPlugins`\n */\nexport const accountLoupeActions: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>\n) => AccountLoupeActions<TAccount> = (client) => ({\n  getExecutionFunctionConfig: async ({\n    selector,\n    account = client.account,\n  }) => {\n    if (!account) {\n      throw new AccountNotFoundError();\n    }\n\n    if (!isSmartAccountClient(client)) {\n      throw new IncompatibleClientError(\n        \"SmartAccountClient\",\n        \"getExecutionFunctionConfig\",\n        client\n      );\n    }\n\n    return client.readContract({\n      address: account.address,\n      abi: IAccountLoupeAbi,\n      functionName: \"getExecutionFunctionConfig\",\n      args: [selector],\n    });\n  },\n\n  getExecutionHooks: async ({ selector, account = client.account }) => {\n    if (!account) {\n      throw new AccountNotFoundError();\n    }\n\n    if (!isSmartAccountClient(client)) {\n      throw new IncompatibleClientError(\n        \"SmartAccountClient\",\n        \"getExecutionHooks\",\n        client\n      );\n    }\n\n    return client.readContract({\n      address: account.address,\n      abi: IAccountLoupeAbi,\n      functionName: \"getExecutionHooks\",\n      args: [selector],\n    });\n  },\n\n  getPreValidationHooks: async ({ selector, account = client.account }) => {\n    if (!account) {\n      throw new AccountNotFoundError();\n    }\n\n    if (!isSmartAccountClient(client)) {\n      throw new IncompatibleClientError(\n        \"SmartAccountClient\",\n        \"getPreValidationHooks\",\n        client\n      );\n    }\n\n    return client.readContract({\n      address: account.address,\n      abi: IAccountLoupeAbi,\n      functionName: \"getPreValidationHooks\",\n      args: [selector],\n    });\n  },\n\n  getInstalledPlugins: async ({ account = client.account }) => {\n    if (!account) {\n      throw new AccountNotFoundError();\n    }\n\n    if (!isSmartAccountClient(client)) {\n      throw new IncompatibleClientError(\n        \"SmartAccountClient\",\n        \"getInstalledPlugins\",\n        client\n      );\n    }\n\n    return client\n      .readContract({\n        address: account.address,\n        abi: IAccountLoupeAbi,\n        functionName: \"getInstalledPlugins\",\n      })\n      .catch(() => []);\n  },\n});\n"]}