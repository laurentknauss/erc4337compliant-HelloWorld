import { AccountNotFoundError, } from "@aa-sdk/core";
import {} from "viem";
import { MultiOwnerPlugin, multiOwnerPluginActions as multiOwnerPluginActions_, } from "./plugin.js";
/**
 * Creates actions for the MultiOwner plugin, including reading owners and checking ownership.
 * NOTE: this is already added to the client returned from createMultiOwnerModularAccountClient
 *
 * @example
 * ```ts
 * import { multiOwnerPluginActions } from "@account-kit/smart-contracts";
 * import { createSmartAccountClient } from "@aa-sdk/core";
 *
 * const client = createSmartAccountClient(...).extend(multiOwnerPluginActions);
 * ```
 *
 * @param {Client<TTransport, TChain, TAccount>} client the client instance containing the transport, chain, and account information
 * @returns {MultiOwnerPluginActions<TAccount>} an object containing the actions for the MultiOwner plugin, such as `readOwners` and `isOwnerOf`
 */
export const multiOwnerPluginActions = (client) => ({
    ...multiOwnerPluginActions_(client),
    async readOwners(args) {
        const account = args?.account ?? client.account;
        if (!account) {
            throw new AccountNotFoundError();
        }
        // TODO: check if the account actually has the plugin installed
        // either via account loupe or checking if the supports interface call passes on the account
        const contract = MultiOwnerPlugin.getContract(client, args?.pluginAddress);
        return contract.read.ownersOf([account.address]);
    },
    async isOwnerOf(args) {
        const account = args.account ?? client.account;
        if (!account) {
            throw new AccountNotFoundError();
        }
        // TODO: check if the account actually has the plugin installed
        // either via account loupe or checking if the supports interface call passes on the account
        const contract = MultiOwnerPlugin.getContract(client, args.pluginAddress);
        return contract.read.isOwnerOf([account.address, args.address]);
    },
});
//# sourceMappingURL=extension.js.map