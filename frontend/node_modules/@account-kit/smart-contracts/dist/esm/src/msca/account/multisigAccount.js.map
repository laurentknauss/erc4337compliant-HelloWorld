{"version":3,"file":"multisigAccount.js","sourceRoot":"","sources":["../../../../../src/msca/account/multisigAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createBundlerClient,\n  getAccountAddress,\n  getEntryPoint,\n  toSmartContractAccount,\n  type Address,\n  type EntryPointParameter,\n  type SmartAccountSigner,\n  type SmartContractAccount,\n  type SmartContractAccountWithSigner,\n  type ToSmartContractAccountParams,\n} from \"@aa-sdk/core\";\nimport {\n  concatHex,\n  encodeFunctionData,\n  hexToBigInt,\n  type Chain,\n  type Hex,\n  type Transport,\n} from \"viem\";\nimport { MultisigModularAccountFactoryAbi } from \"../abis/MultisigModularAccountFactory.js\";\nimport { multisigSignMethods } from \"../plugins/multisig/signer.js\";\nimport { getDefaultMultisigModularAccountFactoryAddress } from \"../utils.js\";\nimport { standardExecutor } from \"./standardExecutor.js\";\n\nexport const MULTISIG_ACCOUNT_SOURCE = \"MultisigModularAccount\";\n\nexport type MultisigModularAccount<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = SmartContractAccountWithSigner<\n  typeof MULTISIG_ACCOUNT_SOURCE,\n  TSigner,\n  \"0.6.0\"\n> & {\n  getLocalThreshold: () => bigint;\n};\n\nexport type CreateMultisigModularAccountParams<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TEntryPointVersion extends \"0.6.0\" = \"0.6.0\"\n> = Pick<\n  ToSmartContractAccountParams<\n    \"MultisigModularAccount\",\n    TTransport,\n    Chain,\n    TEntryPointVersion\n  >,\n  \"transport\" | \"chain\"\n> & {\n  signer: TSigner;\n  salt?: bigint;\n  factoryAddress?: Address;\n  initCode?: Hex;\n  threshold: bigint;\n  owners?: Address[];\n  accountAddress?: Address;\n} & EntryPointParameter<TEntryPointVersion, Chain>;\n\nexport async function createMultisigModularAccount<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  config: CreateMultisigModularAccountParams<TTransport, TSigner>\n): Promise<MultisigModularAccount<TSigner>>;\n\n/**\n * Creates a multisig modular account using the provided parameters, including transport, chain, signer, account address, and other account settings. It configures the account with multiple owners and the specified threshold.\n *\n * @example\n * ```ts\n * import { createMultisigModularAccount } from \"@account-kit/smart-contracts\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { sepolia } from \"viem/chains\";\n * import { http, generatePrivateKey } from \"viem\"\n *\n * const account = await createMultisigModularAccount({\n *  chain: sepolia,\n *  transport: http(\"RPC_URL\"),\n *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n *  owners: [...], // other owners on the account\n *  threshold: 2, // 2 of N signatures\n * });\n * ```\n *\n * @param {CreateMultisigModularAccountParams} config The parameters for creating a multisig modular account.\n * @returns {Promise<MultisigModularAccount>} A promise that resolves to a `MultisigModularAccount` object containing the created account information and methods.\n */\nexport async function createMultisigModularAccount(\n  config: CreateMultisigModularAccountParams\n): Promise<MultisigModularAccount> {\n  const {\n    transport,\n    chain,\n    signer,\n    accountAddress: accountAddress_,\n    initCode,\n    entryPoint = getEntryPoint(chain, { version: \"0.6.0\" }),\n    factoryAddress = getDefaultMultisigModularAccountFactoryAddress(chain),\n    owners = [],\n    salt = 0n,\n    threshold,\n  } = config;\n\n  const client = createBundlerClient({\n    transport,\n    chain,\n  });\n\n  const getAccountInitCode = async () => {\n    if (initCode) {\n      return initCode;\n    }\n\n    // NOTE: the current signer connected will be one of the sigs as well\n    const sigAddress = await signer.getAddress();\n    // sigs need to be deduped + ordered in ascending order and !== to zero address\n    const sigs_ = Array.from(new Set([...owners, sigAddress]))\n      .filter((x) => hexToBigInt(x) !== 0n)\n      .sort((a, b) => {\n        const bigintA = hexToBigInt(a);\n        const bigintB = hexToBigInt(b);\n\n        return bigintA < bigintB ? -1 : bigintA > bigintB ? 1 : 0;\n      });\n\n    return concatHex([\n      factoryAddress,\n      encodeFunctionData({\n        abi: MultisigModularAccountFactoryAbi,\n        functionName: \"createAccount\",\n        args: [salt, sigs_, threshold],\n      }),\n    ]);\n  };\n\n  const accountAddress = await getAccountAddress({\n    client,\n    entryPoint,\n    accountAddress: accountAddress_,\n    getAccountInitCode,\n  });\n\n  const baseAccount = await toSmartContractAccount({\n    transport,\n    chain,\n    entryPoint,\n    accountAddress,\n    source: MULTISIG_ACCOUNT_SOURCE,\n    getAccountInitCode,\n    ...standardExecutor,\n    ...multisigSignMethods({\n      client,\n      accountAddress,\n      threshold,\n      signer: () => signer,\n    }),\n  });\n\n  return {\n    ...baseAccount,\n    getLocalThreshold: () => threshold,\n    publicKey: await signer.getAddress(),\n    getSigner: () => signer,\n  };\n}\n\nexport const isMultisigModularAccount = (\n  acct: SmartContractAccount\n): acct is MultisigModularAccount => {\n  return acct.source === MULTISIG_ACCOUNT_SOURCE;\n};\n"]}