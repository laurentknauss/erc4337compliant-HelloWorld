{"version":3,"file":"alchemyClient.js","sourceRoot":"","sources":["../../../../../src/msca/client/alchemyClient.ts"],"names":[],"mappings":"AACA,OAAO,EACL,+BAA+B,GAGhC,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EACL,mBAAmB,EACnB,8BAA8B,EAC9B,uBAAuB,EACvB,oBAAoB,GAOrB,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAkC,MAAM,MAAM,CAAC;AA2BtD;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,KAAK,UAAU,iCAAiC,CACrD,MAAyC;IAEzC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC;IAE1C,MAAM,OAAO,GAAG,MAAM,8BAA8B,CAAC;QACnD,GAAG,MAAM;QACT,SAAS;QACT,KAAK;KACN,CAAC,CAAC;IAEH,OAAO,+BAA+B,CAAC;QACrC,GAAG,MAAM;QACT,OAAO;QACP,IAAI;KACL,CAAC;SACC,MAAM,CAAC,uBAAuB,CAAC;SAC/B,MAAM,CAAC,oBAAoB,CAAC;SAC5B,MAAM,CAAC,mBAAmB,CAAC,CAAC;AACjC,CAAC","sourcesContent":["import type { SmartAccountSigner } from \"@aa-sdk/core\";\nimport {\n  createAlchemySmartAccountClient,\n  type AlchemySmartAccountClient,\n  type AlchemySmartAccountClientConfig,\n} from \"@account-kit/infra\";\nimport {\n  accountLoupeActions,\n  createMultiOwnerModularAccount,\n  multiOwnerPluginActions,\n  pluginManagerActions,\n  type AccountLoupeActions,\n  type CreateMultiOwnerModularAccountParams,\n  type LightAccount,\n  type MultiOwnerModularAccount,\n  type MultiOwnerPluginActions,\n  type PluginManagerActions,\n} from \"@account-kit/smart-contracts\";\nimport { type Chain, type HttpTransport } from \"viem\";\n\nexport type AlchemyModularAccountClientConfig<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = Omit<\n  CreateMultiOwnerModularAccountParams<HttpTransport, TSigner>,\n  \"transport\"\n> &\n  Omit<\n    AlchemySmartAccountClientConfig<Chain, LightAccount<TSigner>>,\n    \"account\"\n  >;\n\nexport function createModularAccountAlchemyClient<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  params: AlchemyModularAccountClientConfig<TSigner>\n): Promise<\n  AlchemySmartAccountClient<\n    Chain | undefined,\n    MultiOwnerModularAccount<TSigner>,\n    MultiOwnerPluginActions<MultiOwnerModularAccount<TSigner>> &\n      PluginManagerActions<MultiOwnerModularAccount<TSigner>> &\n      AccountLoupeActions<MultiOwnerModularAccount<TSigner>>\n  >\n>;\n\n/**\n * Creates a modular account Alchemy client with the provided configuration.\n *\n * @example\n * ```ts\n * import { createModularAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n * import { sepolia, alchemy } from \"@account-kit/infra\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { generatePrivateKey } from \"viem\"\n *\n * const alchemyAccountClient = await createModularAccountAlchemyClient({\n *  transport: alchemy({ apiKey: \"your-api-key\" }),\n *  chain: sepolia,\n *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())\n * });\n * ```\n *\n * @param {AlchemyModularAccountClientConfig} config The configuration for creating the Alchemy client\n * @returns {Promise<AlchemySmartAccountClient>} A promise that resolves to an `AlchemySmartAccountClient` configured with the desired plugins and actions\n */\nexport async function createModularAccountAlchemyClient(\n  config: AlchemyModularAccountClientConfig\n): Promise<AlchemySmartAccountClient> {\n  const { transport, chain, opts } = config;\n\n  const account = await createMultiOwnerModularAccount({\n    ...config,\n    transport,\n    chain,\n  });\n\n  return createAlchemySmartAccountClient({\n    ...config,\n    account,\n    opts,\n  })\n    .extend(multiOwnerPluginActions)\n    .extend(pluginManagerActions)\n    .extend(accountLoupeActions);\n}\n"]}