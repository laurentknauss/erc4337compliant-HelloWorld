import { type Address, type EntryPointParameter, type SmartAccountSigner, type SmartContractAccount, type SmartContractAccountWithSigner, type ToSmartContractAccountParams } from "@aa-sdk/core";
import { type Chain, type Hex, type Transport } from "viem";
export declare const MULTISIG_ACCOUNT_SOURCE = "MultisigModularAccount";
export type MultisigModularAccount<TSigner extends SmartAccountSigner = SmartAccountSigner> = SmartContractAccountWithSigner<typeof MULTISIG_ACCOUNT_SOURCE, TSigner, "0.6.0"> & {
    getLocalThreshold: () => bigint;
};
export type CreateMultisigModularAccountParams<TTransport extends Transport = Transport, TSigner extends SmartAccountSigner = SmartAccountSigner, TEntryPointVersion extends "0.6.0" = "0.6.0"> = Pick<ToSmartContractAccountParams<"MultisigModularAccount", TTransport, Chain, TEntryPointVersion>, "transport" | "chain"> & {
    signer: TSigner;
    salt?: bigint;
    factoryAddress?: Address;
    initCode?: Hex;
    threshold: bigint;
    owners?: Address[];
    accountAddress?: Address;
} & EntryPointParameter<TEntryPointVersion, Chain>;
export declare function createMultisigModularAccount<TTransport extends Transport = Transport, TSigner extends SmartAccountSigner = SmartAccountSigner>(config: CreateMultisigModularAccountParams<TTransport, TSigner>): Promise<MultisigModularAccount<TSigner>>;
export declare const isMultisigModularAccount: (acct: SmartContractAccount) => acct is MultisigModularAccount<SmartAccountSigner<any>>;
