import { concat, pad } from "viem";
import { formatSignatures } from "./formatSignatures.js";
/**
 * Combines multiple signatures with provided upper limit values for gas fees and returns the concatenated result.
 *
 * @example
 * ```ts
 * import { combineSignatures } from "@account-kit/smart-contracts";
 *
 * const combinedSignature = combineSignatures({
 *  // this is the upper limit pre-verification gas
 *  upperLimitPvg: "0x01",
 *  upperLimitMaxFeePerGas: "0x02",
 *  upperLimitMaxPriorityFeePerGas: "0x03",
 *  signatures: [{
 *    signerType: "EOA",
 *    userOpSigType: "UPPERLIMIT",
 *    signer: `0x...`,
 *    signature: `0x...`,
 *  }]
 *  usingMaxValues: false,
 * });
 * ```
 *
 * @param {CombineSignaturesParams} params The function parameters
 * @returns {Hex} The concatenated result of padding and formatting the provided values and signatures
 */
export function combineSignatures({ signatures, upperLimitMaxFeePerGas, upperLimitMaxPriorityFeePerGas, upperLimitPvg, usingMaxValues, }) {
    return concat([
        pad(upperLimitPvg),
        pad(upperLimitMaxFeePerGas),
        pad(upperLimitMaxPriorityFeePerGas),
        formatSignatures(signatures, usingMaxValues),
    ]);
}
//# sourceMappingURL=combineSignatures.js.map