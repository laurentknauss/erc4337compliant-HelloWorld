{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../../../src/msca/plugins/multisig/extension.ts"],"names":[],"mappings":"AAAA,OAAO,EAMN,MAAM,cAAc,CAAC;AACtB,OAAO,EAAyD,MAAM,MAAM,CAAC;AAE7E,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,oBAAoB,EAAE,MAAM,mCAAmC,CAAC;AACzE,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAC;AACrD,OAAO,EAAE,yBAAyB,EAAE,MAAM,wCAAwC,CAAC;AACnF,OAAO,EACL,qBAAqB,IAAI,sBAAsB,GAEhD,MAAM,aAAa,CAAC;AACrB,OAAO,EAKN,MAAM,YAAY,CAAC;AAqCpB;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAQK,CAOrC,MAA4C,EAC5C,EAAE,CAAC,CAAC;IACJ,GAAG,sBAAsB,CAAC,MAAM,CAAC;IACjC,UAAU,EAAE,CACV,IAA+D,EAC/D,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC;IAE7B,SAAS,EAAE,CACT,IAC+B,EAC/B,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC;IAE5B,YAAY,EAAE,CACZ,IAA+D,EAC/D,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC;IAE/B,oBAAoB,EAAE,CACpB,IAAsD,EACtD,EAAE,CAAC,oBAAoB,CAAC,MAAM,EAAE,IAAI,CAAC;IAEvC,yBAAyB,EAAE,CACzB,MAAiD,EACP,EAAE,CAC5C,yBAAyB,CAAC,MAAM,EAAE,MAAM,CAAC;CAC5C,CAAC,CAAC","sourcesContent":["import {\n  type GetAccountParameter,\n  type GetEntryPointFromAccount,\n  type IsUndefined,\n  type SendUserOperationParameters,\n  type SmartContractAccount,\n} from \"@aa-sdk/core\";\nimport { type Address, type Chain, type Client, type Transport } from \"viem\";\nimport type { GetPluginAddressParameter } from \"../types.js\";\nimport { getThreshold } from \"./actions/getThreshold.js\";\nimport { isOwnerOf } from \"./actions/isOwnerOf.js\";\nimport { proposeUserOperation } from \"./actions/proposeUserOperation.js\";\nimport { readOwners } from \"./actions/readOwners.js\";\nimport { signMultisigUserOperation } from \"./actions/signMultisigUserOperation.js\";\nimport {\n  multisigPluginActions as multisigPluginActions_,\n  type MultisigPluginActions as MultisigPluginActions_,\n} from \"./plugin.js\";\nimport {\n  type MultisigUserOperationContext,\n  type ProposeUserOperationResult,\n  type SignMultisigUserOperationParams,\n  type SignMultisigUserOperationResult,\n} from \"./types.js\";\n\nexport type MultisigPluginActions<\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n> = MultisigPluginActions_<TAccount, MultisigUserOperationContext> & {\n  readOwners: (\n    params: GetPluginAddressParameter & GetAccountParameter<TAccount>\n  ) => Promise<ReadonlyArray<Address>>;\n\n  isOwnerOf: (\n    params: { address: Address } & GetPluginAddressParameter &\n      GetAccountParameter<TAccount>\n  ) => Promise<boolean>;\n\n  getThreshold: (\n    params: GetPluginAddressParameter & GetAccountParameter<TAccount>\n  ) => Promise<bigint>;\n\n  proposeUserOperation: (\n    params: SendUserOperationParameters<TAccount, undefined>\n  ) => Promise<\n    ProposeUserOperationResult<TAccount, GetEntryPointFromAccount<TAccount>>\n  >;\n\n  signMultisigUserOperation: (\n    params: SignMultisigUserOperationParams<TAccount>\n  ) => Promise<SignMultisigUserOperationResult>;\n} & (IsUndefined<TAccount> extends false\n    ? {\n        readOwners: (\n          params?: GetPluginAddressParameter & GetAccountParameter<TAccount>\n        ) => Promise<ReadonlyArray<Address>>;\n      }\n    : {});\n\n/**\n * Provides actions for managing a multisig plugin within the specified client, including reading owners, checking ownership, getting the threshold, proposing user operations, and signing multisig user operations.\n *\n * @example\n * ```ts\n * import { createModularAccountAlchemyClient, multisigPluginActions } from \"@account-kit/smart-contracts\";\n *\n * const client = createModularAccountAlchemyClient(...).extend(multisigPluginActions);\n * ```\n *\n * @param {Client<TTransport, TChain, TAccount>} client The client instance configured with transport, chain, and account information\n * @returns {MultisigPluginActions<TAccount>} An object containing methods to perform actions related to the multisig plugin\n */\nexport const multisigPluginActions: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>\n) => MultisigPluginActions<TAccount> = <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>\n) => ({\n  ...multisigPluginActions_(client),\n  readOwners: (\n    args: GetPluginAddressParameter & GetAccountParameter<TAccount>\n  ) => readOwners(client, args),\n\n  isOwnerOf: (\n    args: { address: Address } & GetPluginAddressParameter &\n      GetAccountParameter<TAccount>\n  ) => isOwnerOf(client, args),\n\n  getThreshold: (\n    args: GetPluginAddressParameter & GetAccountParameter<TAccount>\n  ) => getThreshold(client, args),\n\n  proposeUserOperation: (\n    args: SendUserOperationParameters<TAccount, undefined>\n  ) => proposeUserOperation(client, args),\n\n  signMultisigUserOperation: (\n    params: SignMultisigUserOperationParams<TAccount>\n  ): Promise<SignMultisigUserOperationResult> =>\n    signMultisigUserOperation(client, params),\n});\n"]}