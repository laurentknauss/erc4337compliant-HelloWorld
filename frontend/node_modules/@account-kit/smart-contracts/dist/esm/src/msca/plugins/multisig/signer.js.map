{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../../../../../src/msca/plugins/multisig/signer.ts"],"names":[],"mappings":"AACA,OAAO,EACL,WAAW,EACX,aAAa,GAOd,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,MAAM,aAAa,CAAC;AAahE,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAGjC,EACA,MAAM,EACN,cAAc,EACd,MAAM,EACN,SAAS,EACT,aAAa,GAAG,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,GACf,EAAE,EAAE;IACnD,MAAM,kBAAkB,GAAG,KAAK,EAAE,GAAS,EAA0B,EAAE;QACrE,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,IAAI,CAAC,GACvD,MAAM,MAAM,CAAC,YAAY,CAAC;YACxB,GAAG,EAAE,iBAAiB;YACtB,OAAO,EAAE,aAAa;YACtB,YAAY,EAAE,cAAc;YAC5B,OAAO,EAAE,cAAc;SACxB,CAAC,CAAC;QAEL,OAAO,MAAM,EAAE,CAAC,aAAa,CAAC;YAC5B,MAAM,EAAE;gBACN,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC;gBACxB,IAAI;gBACJ,IAAI;gBACJ,iBAAiB;gBACjB,OAAO;aACR;YACD,KAAK,EAAE;gBACL,sBAAsB,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;aAC7D;YACD,OAAO,EAAE;gBACP,OAAO,EAAE,GAAG;aACb;YACD,WAAW,EAAE,wBAAwB;SACtC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO;QACL,iBAAiB,EAAE,KAAK,IAA4B,EAAE;YACpD,MAAM,CAAC,EAAE,aAAa,CAAC,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC;gBAClD,GAAG,EAAE,iBAAiB;gBACtB,OAAO,EAAE,aAAa;gBACtB,YAAY,EAAE,iBAAiB;gBAC/B,IAAI,EAAE,CAAC,cAAc,CAAC;aACvB,CAAC,CAAC;YAEH,MAAM,eAAe,GAAG,aAAa,KAAK,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC;YAEzE,wGAAwG;YACxG,gDAAgD;YAChD,OAAO,CAAC,IAAI;gBACV,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC;gBACnB,oIAAoI;gBACpI,oIAAoI,CAAC,MAAM,CACzI,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,CAC5B,CAAQ,CAAC;QACd,CAAC;QAED,qBAAqB,EAAE,CAAC,MAAW,EAAgB,EAAE;YACnD,OAAO,MAAM,EAAE,CAAC,WAAW,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAC/C,CAAC;QAED,WAAW,CAAC,EAAE,OAAO,EAAgC;YACnD,OAAO,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;QAClD,CAAC;QAED,aAAa,EAAE,CAIb,mBAAgE,EAClD,EAAE;YAChB,OAAO,kBAAkB,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAChE,CAAC;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { Address, BundlerClient, SmartAccountSigner } from \"@aa-sdk/core\";\nimport {\n  hashMessage,\n  hashTypedData,\n  type Hash,\n  type Hex,\n  type SignableMessage,\n  type Transport,\n  type TypedData,\n  type TypedDataDefinition,\n} from \"viem\";\nimport { MultisigPlugin, MultisigPluginAbi } from \"./plugin.js\";\n\ntype MultisigSignMethodsParams<\n  TTransport extends Transport,\n  TSigner extends SmartAccountSigner\n> = {\n  client: BundlerClient<TTransport>;\n  accountAddress: Address;\n  signer: () => TSigner;\n  threshold: bigint;\n  pluginAddress?: Address;\n};\n\nexport const multisigSignMethods = <\n  TTransport extends Transport,\n  TSigner extends SmartAccountSigner\n>({\n  client,\n  accountAddress,\n  signer,\n  threshold,\n  pluginAddress = MultisigPlugin.meta.addresses[client.chain.id],\n}: MultisigSignMethodsParams<TTransport, TSigner>) => {\n  const signWith712Wrapper = async (msg: Hash): Promise<`0x${string}`> => {\n    const [, name, version, chainId, verifyingContract, salt] =\n      await client.readContract({\n        abi: MultisigPluginAbi,\n        address: pluginAddress,\n        functionName: \"eip712Domain\",\n        account: accountAddress,\n      });\n\n    return signer().signTypedData({\n      domain: {\n        chainId: Number(chainId),\n        name,\n        salt,\n        verifyingContract,\n        version,\n      },\n      types: {\n        AlchemyMultisigMessage: [{ name: \"message\", type: \"bytes\" }],\n      },\n      message: {\n        message: msg,\n      },\n      primaryType: \"AlchemyMultisigMessage\",\n    });\n  };\n\n  return {\n    getDummySignature: async (): Promise<`0x${string}`> => {\n      const [, thresholdRead] = await client.readContract({\n        abi: MultisigPluginAbi,\n        address: pluginAddress,\n        functionName: \"ownershipInfoOf\",\n        args: [accountAddress],\n      });\n\n      const actualThreshold = thresholdRead === 0n ? threshold : thresholdRead;\n\n      // (uint upperLimitPreVerificationGas, uint upperLimitMaxFeePerGas, uint upperLimitMaxPriorityFeePerGas)\n      // the first sig will be on \"actual\" with v = 32\n      return (\"0x\" +\n        \"FF\".repeat(32 * 3) +\n        \"fffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa3c\" +\n        \"fffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\".repeat(\n          Number(actualThreshold) - 1\n        )) as Hex;\n    },\n\n    signUserOperationHash: (uoHash: Hex): Promise<Hex> => {\n      return signer().signMessage({ raw: uoHash });\n    },\n\n    signMessage({ message }: { message: SignableMessage }): Promise<Hex> {\n      return signWith712Wrapper(hashMessage(message));\n    },\n\n    signTypedData: <\n      const typedData extends TypedData | Record<string, unknown>,\n      primaryType extends keyof typedData | \"EIP712Domain\" = keyof typedData\n    >(\n      typedDataDefinition: TypedDataDefinition<typedData, primaryType>\n    ): Promise<Hex> => {\n      return signWith712Wrapper(hashTypedData(typedDataDefinition));\n    },\n  };\n};\n"]}