{"version":3,"file":"combineSignatures.js","sourceRoot":"","sources":["../../../../../../../src/msca/plugins/multisig/utils/combineSignatures.ts"],"names":[],"mappings":"AAAA,OAAO,EAAY,MAAM,EAAE,GAAG,EAAE,MAAM,MAAM,CAAC;AAE7C,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAUzD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,UAAU,iBAAiB,CAAC,EAChC,UAAU,EACV,sBAAsB,EACtB,8BAA8B,EAC9B,aAAa,EACb,cAAc,GACU;IACxB,OAAO,MAAM,CAAC;QACZ,GAAG,CAAC,aAAa,CAAC;QAClB,GAAG,CAAC,sBAAsB,CAAC;QAC3B,GAAG,CAAC,8BAA8B,CAAC;QACnC,gBAAgB,CAAC,UAAU,EAAE,cAAc,CAAC;KAC7C,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { type Hex, concat, pad } from \"viem\";\nimport type { Signature } from \"../types.js\";\nimport { formatSignatures } from \"./formatSignatures.js\";\n\nexport type CombineSignaturesParams = {\n  upperLimitPvg: Hex;\n  upperLimitMaxFeePerGas: Hex;\n  upperLimitMaxPriorityFeePerGas: Hex;\n  signatures: Signature[];\n  usingMaxValues: boolean;\n};\n\n/**\n * Combines multiple signatures with provided upper limit values for gas fees and returns the concatenated result.\n *\n * @example\n * ```ts\n * import { combineSignatures } from \"@account-kit/smart-contracts\";\n *\n * const combinedSignature = combineSignatures({\n *  // this is the upper limit pre-verification gas\n *  upperLimitPvg: \"0x01\",\n *  upperLimitMaxFeePerGas: \"0x02\",\n *  upperLimitMaxPriorityFeePerGas: \"0x03\",\n *  signatures: [{\n *    signerType: \"EOA\",\n *    userOpSigType: \"UPPERLIMIT\",\n *    signer: `0x...`,\n *    signature: `0x...`,\n *  }]\n *  usingMaxValues: false,\n * });\n * ```\n *\n * @param {CombineSignaturesParams} params The function parameters\n * @returns {Hex} The concatenated result of padding and formatting the provided values and signatures\n */\nexport function combineSignatures({\n  signatures,\n  upperLimitMaxFeePerGas,\n  upperLimitMaxPriorityFeePerGas,\n  upperLimitPvg,\n  usingMaxValues,\n}: CombineSignaturesParams): Hex {\n  return concat([\n    pad(upperLimitPvg),\n    pad(upperLimitMaxFeePerGas),\n    pad(upperLimitMaxPriorityFeePerGas),\n    formatSignatures(signatures, usingMaxValues),\n  ]);\n}\n"]}