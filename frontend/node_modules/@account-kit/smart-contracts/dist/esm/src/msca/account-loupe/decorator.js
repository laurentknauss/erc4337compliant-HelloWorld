import { AccountNotFoundError, IncompatibleClientError, isSmartAccountClient, } from "@aa-sdk/core";
import { IAccountLoupeAbi } from "../abis/IAccountLoupe.js";
/**
 * Provides a set of actions for account loupe operations using the specified client.
 * NOTE: this is already added to the client when using any of the Modular Account Clients.
 *
 * @example
 * ```ts
 * import { accountLoupeActions } from "@account-kit/smart-contracts";
 * import { createSmartAccountClient } from "@aa-sdk/core";
 *
 * const client = createSmartAccountClient(...).extend(accountLoupeActions);
 * ```
 *
 * @param {Client<TTransport, TChain, TAccount>} client the client to be used for executing the account loupe actions
 * @returns {AccountLoupeActions<TAccount>} an object containing account loupe actions like `getExecutionFunctionConfig`, `getExecutionHooks`, `getPreValidationHooks`, and `getInstalledPlugins`
 */
export const accountLoupeActions = (client) => ({
    getExecutionFunctionConfig: async ({ selector, account = client.account, }) => {
        if (!account) {
            throw new AccountNotFoundError();
        }
        if (!isSmartAccountClient(client)) {
            throw new IncompatibleClientError("SmartAccountClient", "getExecutionFunctionConfig", client);
        }
        return client.readContract({
            address: account.address,
            abi: IAccountLoupeAbi,
            functionName: "getExecutionFunctionConfig",
            args: [selector],
        });
    },
    getExecutionHooks: async ({ selector, account = client.account }) => {
        if (!account) {
            throw new AccountNotFoundError();
        }
        if (!isSmartAccountClient(client)) {
            throw new IncompatibleClientError("SmartAccountClient", "getExecutionHooks", client);
        }
        return client.readContract({
            address: account.address,
            abi: IAccountLoupeAbi,
            functionName: "getExecutionHooks",
            args: [selector],
        });
    },
    getPreValidationHooks: async ({ selector, account = client.account }) => {
        if (!account) {
            throw new AccountNotFoundError();
        }
        if (!isSmartAccountClient(client)) {
            throw new IncompatibleClientError("SmartAccountClient", "getPreValidationHooks", client);
        }
        return client.readContract({
            address: account.address,
            abi: IAccountLoupeAbi,
            functionName: "getPreValidationHooks",
            args: [selector],
        });
    },
    getInstalledPlugins: async ({ account = client.account }) => {
        if (!account) {
            throw new AccountNotFoundError();
        }
        if (!isSmartAccountClient(client)) {
            throw new IncompatibleClientError("SmartAccountClient", "getInstalledPlugins", client);
        }
        return client
            .readContract({
            address: account.address,
            abi: IAccountLoupeAbi,
            functionName: "getInstalledPlugins",
        })
            .catch(() => []);
    },
});
//# sourceMappingURL=decorator.js.map