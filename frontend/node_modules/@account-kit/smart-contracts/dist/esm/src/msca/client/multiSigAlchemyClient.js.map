{"version":3,"file":"multiSigAlchemyClient.js","sourceRoot":"","sources":["../../../../../src/msca/client/multiSigAlchemyClient.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,yBAAyB,GAE1B,MAAM,cAAc,CAAC;AACtB,OAAO,EACL,+BAA+B,GAGhC,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EACL,mBAAmB,EACnB,4BAA4B,EAC5B,qBAAqB,EACrB,2BAA2B,EAC3B,oBAAoB,GAQrB,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAkC,MAAM,MAAM,CAAC;AAkCtD;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAAM,CAAC,KAAK,UAAU,kCAAkC,CACtD,MAA0C;IAW1C,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;IAE1C,MAAM,OAAO,GAAG,MAAM,4BAA4B,CAAC;QACjD,GAAG,MAAM;QACT,SAAS;QACT,KAAK;KACN,CAAC,CAAC;IAEH,OAAO,+BAA+B,CAAC;QACrC,GAAG,MAAM;QACT,OAAO;QACP,IAAI;QACJ,iBAAiB,EAAE,2BAA2B;KAC/C,CAAC;SACC,MAAM,CAAC,yBAAyB,CAAC;SACjC,MAAM,CAAC,qBAAqB,CAAC;SAC7B,MAAM,CAAC,oBAAoB,CAAC;SAC5B,MAAM,CAAC,mBAAmB,CAAC,CAAC;AACjC,CAAC","sourcesContent":["import {\n  smartAccountClientActions,\n  type SmartAccountSigner,\n} from \"@aa-sdk/core\";\nimport {\n  createAlchemySmartAccountClient,\n  type AlchemySmartAccountClient,\n  type AlchemySmartAccountClientConfig,\n} from \"@account-kit/infra\";\nimport {\n  accountLoupeActions,\n  createMultisigModularAccount,\n  multisigPluginActions,\n  multisigSignatureMiddleware,\n  pluginManagerActions,\n  type AccountLoupeActions,\n  type CreateMultisigModularAccountParams,\n  type LightAccount,\n  type MultisigModularAccount,\n  type MultisigPluginActions,\n  type MultisigUserOperationContext,\n  type PluginManagerActions,\n} from \"@account-kit/smart-contracts\";\nimport { type Chain, type HttpTransport } from \"viem\";\n\n// todo: this file seems somewhat duplicated with ./modularAccountClient.ts, but that file has some multi-owner specific fields. Is there a way to refactor these two to de-dupe?\n\nexport type AlchemyMultisigAccountClientConfig<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = Omit<\n  CreateMultisigModularAccountParams<HttpTransport, TSigner>,\n  \"transport\"\n> &\n  Omit<\n    AlchemySmartAccountClientConfig<\n      Chain,\n      LightAccount<TSigner>,\n      MultisigUserOperationContext\n    >,\n    \"account\"\n  >;\n\nexport function createMultisigAccountAlchemyClient<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  params: AlchemyMultisigAccountClientConfig<TSigner>\n): Promise<\n  AlchemySmartAccountClient<\n    Chain | undefined,\n    MultisigModularAccount<TSigner>,\n    MultisigPluginActions<MultisigModularAccount<TSigner>> &\n      PluginManagerActions<MultisigModularAccount<TSigner>> &\n      AccountLoupeActions<MultisigModularAccount<TSigner>>,\n    MultisigUserOperationContext\n  >\n>;\n\n/**\n * Creates an Alchemy client for a multisig account using the provided configuration.\n *\n * @example\n * ```ts\n * import { createMultisigAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n * import { sepolia } from \"@account-kit/infra\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { generatePrivateKey } from \"viem\"\n *\n * const alchemyAccountClient = await createMultisigAccountAlchemyClient({\n *  transport: alchemy({ apiKey: \"your-api-key\" }),\n *  chain: sepolia,\n *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n *  owners: [...], // other owners on the account\n *  threshold: 2, // 2 of N signatures\n * });\n * ```\n *\n * @param {AlchemyMultisigAccountClientConfig} config The configuration for the Alchemy multisig account client\n * @returns {Promise<AlchemySmartAccountClient<Transport, Chain | undefined, MultisigModularAccount<SmartAccountSigner>, MultisigPluginActions<MultisigModularAccount<SmartAccountSigner>> & PluginManagerActions<MultisigModularAccount<SmartAccountSigner>> & AccountLoupeActions<MultisigModularAccount<SmartAccountSigner>>, MultisigUserOperationContext>>} A promise that resolves to an Alchemy Smart Account Client for multisig accounts with extended functionalities.\n */\nexport async function createMultisigAccountAlchemyClient(\n  config: AlchemyMultisigAccountClientConfig\n): Promise<\n  AlchemySmartAccountClient<\n    Chain | undefined,\n    MultisigModularAccount<SmartAccountSigner>,\n    MultisigPluginActions<MultisigModularAccount<SmartAccountSigner>> &\n      PluginManagerActions<MultisigModularAccount<SmartAccountSigner>> &\n      AccountLoupeActions<MultisigModularAccount<SmartAccountSigner>>,\n    MultisigUserOperationContext\n  >\n> {\n  const { transport, opts, chain } = config;\n\n  const account = await createMultisigModularAccount({\n    ...config,\n    transport,\n    chain,\n  });\n\n  return createAlchemySmartAccountClient({\n    ...config,\n    account,\n    opts,\n    signUserOperation: multisigSignatureMiddleware,\n  })\n    .extend(smartAccountClientActions)\n    .extend(multisigPluginActions)\n    .extend(pluginManagerActions)\n    .extend(accountLoupeActions);\n}\n"]}