{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../../../../../src/msca/plugins/multi-owner/signer.ts"],"names":[],"mappings":"AACA,OAAO,EACL,WAAW,EACX,aAAa,GAOd,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAEpE,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAIrC,MAAiC,EACjC,cAAuB,EACvB,MAAqB,EACrB,gBAAyB,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EACzE,EAAE;IACF,MAAM,kBAAkB,GAAG,KAAK,EAAE,GAAS,EAA0B,EAAE;QACrE,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,IAAI,CAAC,GACvD,MAAM,MAAM,CAAC,YAAY,CAAC;YACxB,GAAG,EAAE,mBAAmB;YACxB,OAAO,EAAE,aAAa;YACtB,YAAY,EAAE,cAAc;YAC5B,OAAO,EAAE,cAAc;SACxB,CAAC,CAAC;QAEL,OAAO,MAAM,EAAE,CAAC,aAAa,CAAC;YAC5B,MAAM,EAAE;gBACN,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC;gBACxB,IAAI;gBACJ,IAAI;gBACJ,iBAAiB;gBACjB,OAAO;aACR;YACD,KAAK,EAAE;gBACL,4BAA4B,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;aACnE;YACD,OAAO,EAAE;gBACP,OAAO,EAAE,GAAG;aACb;YACD,WAAW,EAAE,8BAA8B;SAC5C,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO;QACL,iBAAiB,EAAE,GAAQ,EAAE;YAC3B,OAAO,sIAAsI,CAAC;QAChJ,CAAC;QAED,qBAAqB,EAAE,CAAC,MAAqB,EAA0B,EAAE;YACvE,OAAO,MAAM,EAAE,CAAC,WAAW,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAC/C,CAAC;QAED,WAAW,CAAC,EACV,OAAO,GAGR;YACC,OAAO,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;QAClD,CAAC;QAED,aAAa,EAAE,CAIb,mBAAgE,EAClD,EAAE;YAChB,OAAO,kBAAkB,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAChE,CAAC;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { Address, BundlerClient, SmartAccountSigner } from \"@aa-sdk/core\";\nimport {\n  hashMessage,\n  hashTypedData,\n  type Hash,\n  type Hex,\n  type SignableMessage,\n  type Transport,\n  type TypedData,\n  type TypedDataDefinition,\n} from \"viem\";\nimport { MultiOwnerPlugin, MultiOwnerPluginAbi } from \"./plugin.js\";\n\nexport const multiOwnerMessageSigner = <\n  TTransport extends Transport,\n  TSigner extends SmartAccountSigner\n>(\n  client: BundlerClient<TTransport>,\n  accountAddress: Address,\n  signer: () => TSigner,\n  pluginAddress: Address = MultiOwnerPlugin.meta.addresses[client.chain.id]\n) => {\n  const signWith712Wrapper = async (msg: Hash): Promise<`0x${string}`> => {\n    const [, name, version, chainId, verifyingContract, salt] =\n      await client.readContract({\n        abi: MultiOwnerPluginAbi,\n        address: pluginAddress,\n        functionName: \"eip712Domain\",\n        account: accountAddress,\n      });\n\n    return signer().signTypedData({\n      domain: {\n        chainId: Number(chainId),\n        name,\n        salt,\n        verifyingContract,\n        version,\n      },\n      types: {\n        AlchemyModularAccountMessage: [{ name: \"message\", type: \"bytes\" }],\n      },\n      message: {\n        message: msg,\n      },\n      primaryType: \"AlchemyModularAccountMessage\",\n    });\n  };\n\n  return {\n    getDummySignature: (): Hex => {\n      return \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n    },\n\n    signUserOperationHash: (uoHash: `0x${string}`): Promise<`0x${string}`> => {\n      return signer().signMessage({ raw: uoHash });\n    },\n\n    signMessage({\n      message,\n    }: {\n      message: SignableMessage;\n    }): Promise<`0x${string}`> {\n      return signWith712Wrapper(hashMessage(message));\n    },\n\n    signTypedData: <\n      const typedData extends TypedData | Record<string, unknown>,\n      primaryType extends keyof typedData | \"EIP712Domain\" = keyof typedData\n    >(\n      typedDataDefinition: TypedDataDefinition<typedData, primaryType>\n    ): Promise<Hex> => {\n      return signWith712Wrapper(hashTypedData(typedDataDefinition));\n    },\n  };\n};\n"]}