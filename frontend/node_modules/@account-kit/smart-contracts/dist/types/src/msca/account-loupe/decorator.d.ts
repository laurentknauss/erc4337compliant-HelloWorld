import { type GetAccountParameter, type SmartContractAccount } from "@aa-sdk/core";
import type { Address, Chain, Client, Hash, Transport } from "viem";
import type { ExecutionFunctionConfig, ExecutionHooks, FunctionReference, PreValidationHooks } from "./types.js";
export type AccountLoupeActions<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined> = {
    getExecutionFunctionConfig(args: {
        selector: FunctionReference;
    } & GetAccountParameter<TAccount>): Promise<ExecutionFunctionConfig>;
    getExecutionHooks(args: {
        selector: FunctionReference;
    } & GetAccountParameter<TAccount>): Promise<ReadonlyArray<ExecutionHooks>>;
    getPreValidationHooks(args: {
        selector: Hash;
    } & GetAccountParameter<TAccount>): Promise<Readonly<PreValidationHooks>>;
    getInstalledPlugins(args: GetAccountParameter<TAccount>): Promise<ReadonlyArray<Address>>;
};
/**
 * Provides a set of actions for account loupe operations using the specified client.
 * NOTE: this is already added to the client when using any of the Modular Account Clients.
 *
 * @example
 * ```ts
 * import { accountLoupeActions } from "@account-kit/smart-contracts";
 * import { createSmartAccountClient } from "@aa-sdk/core";
 *
 * const client = createSmartAccountClient(...).extend(accountLoupeActions);
 * ```
 *
 * @param {Client<TTransport, TChain, TAccount>} client the client to be used for executing the account loupe actions
 * @returns {AccountLoupeActions<TAccount>} an object containing account loupe actions like `getExecutionFunctionConfig`, `getExecutionHooks`, `getPreValidationHooks`, and `getInstalledPlugins`
 */
export declare const accountLoupeActions: <TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined>(client: Client<TTransport, TChain, TAccount>) => AccountLoupeActions<TAccount>;
//# sourceMappingURL=decorator.d.ts.map