import { type GetEntryPointFromAccount, type SmartContractAccount, type UserOperationRequest } from "@aa-sdk/core";
import { type Hex } from "viem";
import type { Signature } from "../types.js";
export type SplitAggregateSignatureParams<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = {
    aggregatedSignature: Hex;
    threshold: number;
    account: SmartContractAccount;
    request: UserOperationRequest<TEntryPointVersion>;
};
export type SplitAggregateSignatureResult = {
    upperLimitPvg: Hex;
    upperLimitMaxFeePerGas: Hex;
    upperLimitMaxPriorityFeePerGas: Hex;
    signatures: Signature[];
};
/**
 * Takes an aggregated signature and threshold and splits it into its components
 *
 * @param {SplitAggregateSignatureParams<TAccount>} args - the arguments for the split
 * @param {Hex} args.aggregateSignature - the aggregated signature to split
 * @param {number} args.threshold - the threshold for the signature
 * @param {SmartContractAccount} args.account - the account which the signature is valid for
 * @param {UserOperationRequest<TEntryPointVersion>} args.request - the user operation request that the signature is for
 * @returns {Promise<SplitAggregateSignatureResult>} the signature split into its upper limits and current signatures
 */
export declare const splitAggregatedSignature: <TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined>(args: SplitAggregateSignatureParams<TAccount, GetEntryPointFromAccount<TAccount, SmartContractAccount<string, keyof import("@aa-sdk/core").EntryPointRegistryBase<unknown>>>>) => Promise<SplitAggregateSignatureResult>;
//# sourceMappingURL=splitAggregatedSignature.d.ts.map