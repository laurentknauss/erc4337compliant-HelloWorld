import type { GetEntryPointFromAccount, UserOperationOverridesParameter } from "@aa-sdk/core";
import { type GetAccountParameter, type IsUndefined, type SendUserOperationResult, type SmartContractAccount } from "@aa-sdk/core";
import type { Address, Chain, Client, Hex, Transport } from "viem";
import type { GetPluginAddressParameter } from "../types.js";
import { type SessionKeyPluginActions as SessionKeyPluginActions_ } from "./plugin.js";
export type SessionKeyPluginActions<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = Omit<SessionKeyPluginActions_<TAccount>, "removeSessionKey" | "addSessionKey" | "rotateSessionKey" | "updateKeyPermissions"> & {
    isAccountSessionKey: (args: {
        key: Address;
    } & GetPluginAddressParameter & GetAccountParameter<TAccount>) => Promise<boolean>;
    getAccountSessionKeys: (args: GetPluginAddressParameter & GetAccountParameter<TAccount>) => Promise<ReadonlyArray<Address>>;
    removeSessionKey: (args: {
        key: Address;
    } & GetPluginAddressParameter & GetAccountParameter<TAccount> & UserOperationOverridesParameter<TEntryPointVersion>) => Promise<SendUserOperationResult<TEntryPointVersion>>;
    addSessionKey: (args: {
        key: Address;
        permissions: Hex[];
        tag: Hex;
    } & GetPluginAddressParameter & GetAccountParameter<TAccount> & UserOperationOverridesParameter<TEntryPointVersion>) => Promise<SendUserOperationResult<TEntryPointVersion>>;
    rotateSessionKey: (args: {
        oldKey: Address;
        newKey: Address;
    } & GetPluginAddressParameter & GetAccountParameter<TAccount> & UserOperationOverridesParameter<TEntryPointVersion>) => Promise<SendUserOperationResult<TEntryPointVersion>>;
    updateSessionKeyPermissions: (args: {
        key: Address;
        permissions: Hex[];
    } & GetPluginAddressParameter & GetAccountParameter<TAccount> & UserOperationOverridesParameter<TEntryPointVersion>) => Promise<SendUserOperationResult<TEntryPointVersion>>;
} & (IsUndefined<TAccount> extends false ? {
    getAccountSessionKeys: (args?: GetPluginAddressParameter & GetAccountParameter<TAccount>) => Promise<ReadonlyArray<Address>>;
} : {});
/**
 * Creates actions for managing session keys in a smart contract associated with a client, including adding, removing, rotating, and updating session key permissions.
 *
 * @example
 * ```ts
 * import { createModularAccountAlchemyClient, sessionKeyPluginActions } from "@account-kit/smart-contracts";
 *
 * const client = createModularAccountAlchemyClient(...).extend(sessionKeyPluginActions);
 * ```
 *
 * @param {Client<TTransport, TChain, TAccount>} client The client instance to use for managing session keys
 * @returns {SessionKeyPluginActions<TAccount>} An object containing methods for session key management and interaction with the smart contract
 */
export declare const sessionKeyPluginActions: <TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined>(client: Client<TTransport, TChain, TAccount>) => SessionKeyPluginActions<TAccount>;
//# sourceMappingURL=extension.d.ts.map