import { type EntryPointDef, type SmartAccountSigner } from "@aa-sdk/core";
import { type Address, type Chain, type Hex, type Transport } from "viem";
import type { LightAccountEntryPointVersion, LightAccountVersion } from "../types.js";
import { type CreateLightAccountBaseParams, type LightAccountBase } from "./base.js";
export type MultiOwnerLightAccount<TSigner extends SmartAccountSigner = SmartAccountSigner, TLightAccountVersion extends LightAccountVersion<"MultiOwnerLightAccount"> = LightAccountVersion<"MultiOwnerLightAccount">> = LightAccountBase<TSigner, "MultiOwnerLightAccount", TLightAccountVersion> & {
    encodeUpdateOwners: (ownersToAdd: Address[], ownersToRemove: Address[]) => Hex;
    getOwnerAddresses: () => Promise<readonly Address[]>;
};
export type CreateMultiOwnerLightAccountParams<TTransport extends Transport = Transport, TSigner extends SmartAccountSigner = SmartAccountSigner, TLightAccountVersion extends LightAccountVersion<"MultiOwnerLightAccount"> = LightAccountVersion<"MultiOwnerLightAccount">> = Omit<CreateLightAccountBaseParams<"MultiOwnerLightAccount", TLightAccountVersion, TTransport, TSigner>, "getAccountInitCode" | "entryPoint" | "version" | "abi" | "accountAddress" | "type"> & {
    salt?: bigint;
    initCode?: Hex;
    accountAddress?: Address;
    factoryAddress?: Address;
    version?: TLightAccountVersion;
    entryPoint?: EntryPointDef<LightAccountEntryPointVersion<"MultiOwnerLightAccount", TLightAccountVersion>, Chain>;
    owners?: Address[];
};
export declare function createMultiOwnerLightAccount<TTransport extends Transport = Transport, TSigner extends SmartAccountSigner = SmartAccountSigner, TLightAccountVersion extends LightAccountVersion<"MultiOwnerLightAccount"> = LightAccountVersion<"MultiOwnerLightAccount">>(config: CreateMultiOwnerLightAccountParams<TTransport, TSigner, TLightAccountVersion>): Promise<MultiOwnerLightAccount<TSigner, TLightAccountVersion>>;
//# sourceMappingURL=multiOwner.d.ts.map