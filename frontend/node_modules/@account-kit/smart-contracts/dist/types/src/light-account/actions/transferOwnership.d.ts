import { type GetAccountParameter, type GetEntryPointFromAccount, type SmartAccountSigner, type UserOperationOverridesParameter } from "@aa-sdk/core";
import type { Chain, Client, Hex, Transport } from "viem";
import type { LightAccount } from "../accounts/account";
export type TransferLightAccountOwnershipParams<TSigner extends SmartAccountSigner = SmartAccountSigner, TAccount extends LightAccount<TSigner> | undefined = LightAccount<TSigner> | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = {
    newOwner: TSigner;
    waitForTxn?: boolean;
} & GetAccountParameter<TAccount, LightAccount<TSigner>> & UserOperationOverridesParameter<TEntryPointVersion>;
/**
 * Transfers the ownership of a light account to a new owner.
 * This function ensures that the client is a compatible smart acccount client and that a Light Account is provided.
 * If the waitForTxn parameter is true, it will wait for the transaction to be completed before returning.
 *
 * @example
 * ```ts
 * import { transferOwnership, createLightAccountClient } from "@account-kit/smart-contracts";
 *
 * const lightAccountClient = createLightAccountClient({
 *  signer,
 *  transport,
 *  chain,
 * });
 *
 * const txHash = await transferOwnership(lightAccountClient, {
 *  newOwner: newOwnerSigner,
 *  waitForTxn: true, // set to false to return a uoHash instead
 * });
 * ```
 *
 * @param {Client<TTransport, TChain, TAccount>} client The smart account client instance used to execute the transfer
 * @param {TransferLightAccountOwnershipParams<TSigner, TAccount>} args The parameters for transferring ownership
 * @returns {Promise<Hex>} The transaction or UO hash as a Hex string
 */
export declare const transferOwnership: <TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TSigner extends SmartAccountSigner<any> = SmartAccountSigner<any>, TAccount extends LightAccount<TSigner> | undefined = LightAccount<TSigner> | undefined>(client: Client<TTransport, TChain, TAccount>, args: TransferLightAccountOwnershipParams<TSigner, TAccount, GetEntryPointFromAccount<TAccount, import("@aa-sdk/core").SmartContractAccount<string, keyof import("@aa-sdk/core").EntryPointRegistryBase<unknown>>>>) => Promise<Hex>;
//# sourceMappingURL=transferOwnership.d.ts.map