{"version":3,"file":"smartAccountClient.js","sourceRoot":"","sources":["../../../src/client/smartAccountClient.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,kBAAkB,EAClB,wBAAwB,EACxB,wBAAwB,GASzB,MAAM,cAAc,CAAC;AACtB,OAAO,EAAc,MAAM,MAAM,CAAC;AAElC,OAAO,EAAE,iCAAiC,EAAE,MAAM,gBAAgB,CAAC;AACnE,OAAO,EAAE,mBAAmB,EAAE,MAAM,+BAA+B,CAAC;AACpE,OAAO,EAAE,2BAA2B,EAAE,MAAM,6BAA6B,CAAC;AAC1E,OAAO,EAAE,6BAA6B,EAAE,MAAM,yCAAyC,CAAC;AACxF,OAAO,EACL,cAAc,GAEf,MAAM,8BAA8B,CAAC;AAGtC,MAAM,UAAU,mBAAmB,CAEjC,OAAiB;IACjB,OAAO,EAAE,uBAAuB,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,UAAU,EAAE,CAAC;AACrE,CAAC;AAiFD;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,UAAU,+BAA+B,CAAC,EAC9C,OAAO,EACP,QAAQ,EACR,aAAa,EACb,YAAY,EACZ,gBAAgB,EAChB,YAAY,EACZ,iBAAiB,EACjB,SAAS,EACT,KAAK,EACL,IAAI,GAC4B;IAChC,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,IAAI,kBAAkB,EAAE,CAAC;IACjC,CAAC;IAED,MAAM,UAAU,GACd,IAAI,EAAE,UAAU,IAAI,iCAAiC,CAAC,KAAK,CAAC,CAAC;IAE/D,MAAM,SAAS,GAAG,wBAAwB,CAAC;QACzC,OAAO;QACP,SAAS;QACT,KAAK;QACL,IAAI,EAAE,2BAA2B;QACjC,IAAI,EAAE;YACJ,GAAG,IAAI;YACP,UAAU;SACX;QACD,gBAAgB,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;YACvC,IAAI,wBAAwB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC3C,SAAS,CAAC,aAAa,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAC7D,CAAC;YACD,OAAO,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QACpE,CAAC;QACD,YAAY,EAAE,YAAY,IAAI,mBAAmB,CAAC,SAAS,CAAC;QAC5D,sBAAsB,EAAE,aAAa;YACnC,CAAC,CAAC,6BAA6B,CAAC,SAAS,CAAC;YAC1C,CAAC,CAAC,SAAS;QACb,YAAY;QACZ,GAAG,CAAC,QAAQ,IAAI,2BAA2B,CAAC,QAAQ,CAAC,CAAC;QACtD,iBAAiB;KAClB,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IAE1B,IAAI,OAAO,IAAI,wBAAwB,CAAC,OAAO,CAAC,EAAE,CAAC;QACjD,SAAS,CAAC,aAAa,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import {\n  ChainNotFoundError,\n  createSmartAccountClient,\n  isSmartAccountWithSigner,\n  type Prettify,\n  type SmartAccountClient,\n  type SmartAccountClientActions,\n  type SmartAccountClientConfig,\n  type SmartAccountClientRpcSchema,\n  type SmartContractAccount,\n  type SmartContractAccountWithSigner,\n  type UserOperationContext,\n} from \"@aa-sdk/core\";\nimport { type Chain } from \"viem\";\nimport type { AlchemyTransport } from \"../alchemyTransport.js\";\nimport { getDefaultUserOperationFeeOptions } from \"../defaults.js\";\nimport { alchemyFeeEstimator } from \"../middleware/feeEstimator.js\";\nimport { alchemyGasManagerMiddleware } from \"../middleware/gasManager.js\";\nimport { alchemyUserOperationSimulator } from \"../middleware/userOperationSimulator.js\";\nimport {\n  alchemyActions,\n  type AlchemySmartAccountClientActions,\n} from \"./decorators/smartAccount.js\";\nimport type { AlchemyRpcSchema } from \"./types.js\";\n\nexport function getSignerTypeHeader<\n  TAccount extends SmartContractAccountWithSigner\n>(account: TAccount) {\n  return { \"Alchemy-Aa-Sdk-Signer\": account.getSigner().signerType };\n}\n\n// #region AlchemySmartAccountClientConfig\nexport type AlchemySmartAccountClientConfig<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  context extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined\n> = {\n  account?: account;\n  useSimulation?: boolean;\n  policyId?: string;\n} & Pick<\n  SmartAccountClientConfig<AlchemyTransport, chain, account, context>,\n  | \"customMiddleware\"\n  | \"feeEstimator\"\n  | \"gasEstimator\"\n  | \"signUserOperation\"\n  | \"transport\"\n  | \"chain\"\n  | \"opts\"\n>;\n// #endregion AlchemySmartAccountClientConfig\n\nexport type BaseAlchemyActions<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  context extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined\n> = SmartAccountClientActions<chain, account, context> &\n  AlchemySmartAccountClientActions<account, context>;\n\nexport type AlchemySmartAccountClient_Base<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  actions extends Record<string, unknown> = Record<string, unknown>,\n  context extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined\n> = Prettify<\n  SmartAccountClient<\n    AlchemyTransport,\n    chain,\n    account,\n    actions & BaseAlchemyActions<chain, account, context>,\n    [...SmartAccountClientRpcSchema, ...AlchemyRpcSchema],\n    context\n  >\n>;\n\nexport type AlchemySmartAccountClient<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  actions extends Record<string, unknown> = Record<string, unknown>,\n  context extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined\n> = Prettify<AlchemySmartAccountClient_Base<chain, account, actions, context>>;\n\nexport function createAlchemySmartAccountClient<\n  TChain extends Chain = Chain,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined\n>(\n  params: AlchemySmartAccountClientConfig<TChain, TAccount, TContext>\n): AlchemySmartAccountClient<TChain, TAccount, Record<string, never>, TContext>;\n\n/**\n * Creates an Alchemy smart account client using the provided configuration options, including account details, gas manager configuration, and custom middleware.\n *\n * @example\n * ```ts\n * import { createAlchemySmartAccountClient, alchemy } from \"@account-kit/infra\";\n * import { sepolia } from \"@account-kit/infra/chain\";\n *\n * const client = createAlchemySmartAccountClient({\n *  chain: sepolia,\n *  transport: alchemy({ apiKey: \"your-api-key\" }),\n * });\n * ```\n *\n * @param {AlchemySmartAccountClientConfig} config The configuration for creating the Alchemy smart account client\n * @returns {AlchemySmartAccountClient} An instance of `AlchemySmartAccountClient` configured based on the provided options\n */\nexport function createAlchemySmartAccountClient({\n  account,\n  policyId,\n  useSimulation,\n  feeEstimator,\n  customMiddleware,\n  gasEstimator,\n  signUserOperation,\n  transport,\n  chain,\n  opts,\n}: AlchemySmartAccountClientConfig): AlchemySmartAccountClient {\n  if (!chain) {\n    throw new ChainNotFoundError();\n  }\n\n  const feeOptions =\n    opts?.feeOptions ?? getDefaultUserOperationFeeOptions(chain);\n\n  const scaClient = createSmartAccountClient({\n    account,\n    transport,\n    chain,\n    type: \"AlchemySmartAccountClient\",\n    opts: {\n      ...opts,\n      feeOptions,\n    },\n    customMiddleware: async (struct, args) => {\n      if (isSmartAccountWithSigner(args.account)) {\n        transport.updateHeaders(getSignerTypeHeader(args.account));\n      }\n      return customMiddleware ? customMiddleware(struct, args) : struct;\n    },\n    feeEstimator: feeEstimator ?? alchemyFeeEstimator(transport),\n    userOperationSimulator: useSimulation\n      ? alchemyUserOperationSimulator(transport)\n      : undefined,\n    gasEstimator,\n    ...(policyId && alchemyGasManagerMiddleware(policyId)),\n    signUserOperation,\n  }).extend(alchemyActions);\n\n  if (account && isSmartAccountWithSigner(account)) {\n    transport.updateHeaders(getSignerTypeHeader(account));\n  }\n\n  return scaClient;\n}\n"]}