import {} from "viem";
import { generatePrivateKey, mnemonicToAccount, privateKeyToAccount, } from "viem/accounts";
/**
 * Represents a local account signer and provides methods to sign messages and transactions, as well as static methods to create the signer from mnemonic or private key.
 */
export class LocalAccountSigner {
    /**
     * A function to initialize an object with an inner parameter and derive a signerType from it.
     *
     * @example
     * ```ts
     * import { LocalAccountSigner } from "@aa-sdk/core";
     * import { privateKeyToAccount, generatePrivateKey } from "viem";
     *
     * const signer = new LocalAccountSigner(
     *  privateKeyToAccount(generatePrivateKey()),
     * );
     * ```
     *
     * @param {T} inner The inner parameter containing the necessary data
     */
    constructor(inner) {
        Object.defineProperty(this, "inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signerType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Signs the provided message using the inner signMessage function.
         *
         * @example
         * ```ts
         * import { LocalAccountSigner } from "@aa-sdk/core";
         * import { generatePrivateKey } from "viem";
         *
         * const signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());
         * const signature = await signer.signMessage("Hello, world!");
         * ```
         *
         * @param {string} message The message to be signed
         * @returns {Promise<any>} A promise that resolves to the signed message
         */
        Object.defineProperty(this, "signMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message) => {
                return this.inner.signMessage({ message });
            }
        });
        /**
         * Signs typed data using the given parameters.
         *
         * @example
         * ```ts
         * import { LocalAccountSigner } from "@aa-sdk/core";
         * import { generatePrivateKey } from "viem";
         *
         * const signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());
         * const signature = await signer.signTypedData({
         *  domain: {},
         *  types: {},
         *  primaryType: "",
         *  message: {},
         * });
         * ```
         *
         * @param {TypedDataDefinition<TTypedData, TPrimaryType>} params The parameters defining the typed data and primary type
         * @returns {Promise<Hex>} A promise that resolves to the signed data in hexadecimal format
         */
        Object.defineProperty(this, "signTypedData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                return this.inner.signTypedData(params);
            }
        });
        /**
         * Returns the address of the inner object in a specific hexadecimal format.
         *
         * @example
         * ```ts
         * import { LocalAccountSigner } from "@aa-sdk/core";
         * import { generatePrivateKey } from "viem";
         *
         * const signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());
         * const address = await signer.getAddress();
         * ```
         *
         * @returns {Promise<Hex>} A promise that resolves to the address in the format `0x{string}`
         */
        Object.defineProperty(this, "getAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                return this.inner.address;
            }
        });
        this.inner = inner;
        this.signerType = inner.type; //  type: "local"
    }
    /**
     * Creates a LocalAccountSigner using the provided mnemonic key and optional HD options.
     *
     * @example
     * ```ts
     * import { LocalAccountSigner } from "@aa-sdk/core";
     * import { generateMnemonic } from "viem";
     *
     * const signer = LocalAccountSigner.mnemonicToAccountSigner(generateMnemonic());
     * ```
     *
     * @param {string} key The mnemonic key to derive the account from.
     * @param {HDOptions} [opts] Optional HD options for deriving the account.
     * @returns {LocalAccountSigner<HDAccount>} A LocalAccountSigner object for the derived account.
     */
    static mnemonicToAccountSigner(key, opts) {
        const signer = mnemonicToAccount(key, opts);
        return new LocalAccountSigner(signer);
    }
    /**
     * Creates a `LocalAccountSigner` instance using the provided private key.
     *
     * @example
     * ```ts
     * import { LocalAccountSigner } from "@aa-sdk/core";
     * import { generatePrivateKey } from "viem";
     *
     * const signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());
     * ```
     *
     * @param {Hex} key The private key in hexadecimal format
     * @returns {LocalAccountSigner<PrivateKeyAccount>} An instance of `LocalAccountSigner` initialized with the provided private key
     */
    static privateKeyToAccountSigner(key) {
        const signer = privateKeyToAccount(key);
        return new LocalAccountSigner(signer);
    }
    /**
     * Generates a new private key and creates a `LocalAccountSigner` for a `PrivateKeyAccount`.
     *
     * @example
     * ```ts
     * import { LocalAccountSigner } from "@aa-sdk/core";
     *
     * const signer = LocalAccountSigner.generatePrivateKeySigner();
     * ```
     *
     * @returns {LocalAccountSigner<PrivateKeyAccount>} A `LocalAccountSigner` instance initialized with the generated private key account
     */
    static generatePrivateKeySigner() {
        const signer = privateKeyToAccount(generatePrivateKey());
        return new LocalAccountSigner(signer);
    }
}
//# sourceMappingURL=local-account.js.map