{"version":3,"file":"local-account.js","sourceRoot":"","sources":["../../../src/signer/local-account.ts"],"names":[],"mappings":"AAAA,OAAO,EASN,MAAM,MAAM,CAAC;AACd,OAAO,EACL,kBAAkB,EAClB,iBAAiB,EACjB,mBAAmB,GACpB,MAAM,eAAe,CAAC;AAGvB;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAO7B;;;;;;;;;;;;;;OAcG;IACH,YAAY,KAAQ;QAlBpB;;;;;WAAS;QACT;;;;;WAAmB;QAsBnB;;;;;;;;;;;;;;WAcG;QACM;;;;mBAAoE,CAC3E,OAAO,EACP,EAAE;gBACF,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;YAC7C,CAAC;WAAC;QAEF;;;;;;;;;;;;;;;;;;;WAmBG;QACM;;;;mBAAgB,KAAK,EAI5B,MAAqD,EACvC,EAAE;gBAChB,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC1C,CAAC;WAAC;QAEF;;;;;;;;;;;;;WAaG;QACM;;;;mBAAa,KAAK,IAA4B,EAAE;gBACvD,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;YAC5B,CAAC;WAAC;QAtEA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,iBAAiB;IACjD,CAAC;IAsED;;;;;;;;;;;;;;OAcG;IACH,MAAM,CAAC,uBAAuB,CAC5B,GAAW,EACX,IAAgB;QAEhB,MAAM,MAAM,GAAG,iBAAiB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC5C,OAAO,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,MAAM,CAAC,yBAAyB,CAC9B,GAAQ;QAER,MAAM,MAAM,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;QACxC,OAAO,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;;;;;;OAWG;IACH,MAAM,CAAC,wBAAwB;QAC7B,MAAM,MAAM,GAAG,mBAAmB,CAAC,kBAAkB,EAAE,CAAC,CAAC;QACzD,OAAO,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;CACF","sourcesContent":["import {\n  type HDAccount,\n  type HDOptions,\n  type Hex,\n  type LocalAccount,\n  type PrivateKeyAccount,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n} from \"viem\";\nimport {\n  generatePrivateKey,\n  mnemonicToAccount,\n  privateKeyToAccount,\n} from \"viem/accounts\";\nimport type { SmartAccountSigner } from \"./types.js\";\n\n/**\n * Represents a local account signer and provides methods to sign messages and transactions, as well as static methods to create the signer from mnemonic or private key.\n */\nexport class LocalAccountSigner<\n  T extends HDAccount | PrivateKeyAccount | LocalAccount\n> implements SmartAccountSigner<T>\n{\n  inner: T;\n  signerType: string;\n\n  /**\n   * A function to initialize an object with an inner parameter and derive a signerType from it.\n   *\n   * @example\n   * ```ts\n   * import { LocalAccountSigner } from \"@aa-sdk/core\";\n   * import { privateKeyToAccount, generatePrivateKey } from \"viem\";\n   *\n   * const signer = new LocalAccountSigner(\n   *  privateKeyToAccount(generatePrivateKey()),\n   * );\n   * ```\n   *\n   * @param {T} inner The inner parameter containing the necessary data\n   */\n  constructor(inner: T) {\n    this.inner = inner;\n    this.signerType = inner.type; //  type: \"local\"\n  }\n\n  /**\n   * Signs the provided message using the inner signMessage function.\n   *\n   * @example\n   * ```ts\n   * import { LocalAccountSigner } from \"@aa-sdk/core\";\n   * import { generatePrivateKey } from \"viem\";\n   *\n   * const signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\n   * const signature = await signer.signMessage(\"Hello, world!\");\n   * ```\n   *\n   * @param {string} message The message to be signed\n   * @returns {Promise<any>} A promise that resolves to the signed message\n   */\n  readonly signMessage: (message: SignableMessage) => Promise<`0x${string}`> = (\n    message\n  ) => {\n    return this.inner.signMessage({ message });\n  };\n\n  /**\n   * Signs typed data using the given parameters.\n   *\n   * @example\n   * ```ts\n   * import { LocalAccountSigner } from \"@aa-sdk/core\";\n   * import { generatePrivateKey } from \"viem\";\n   *\n   * const signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\n   * const signature = await signer.signTypedData({\n   *  domain: {},\n   *  types: {},\n   *  primaryType: \"\",\n   *  message: {},\n   * });\n   * ```\n   *\n   * @param {TypedDataDefinition<TTypedData, TPrimaryType>} params The parameters defining the typed data and primary type\n   * @returns {Promise<Hex>} A promise that resolves to the signed data in hexadecimal format\n   */\n  readonly signTypedData = async <\n    const TTypedData extends TypedData | Record<string, unknown>,\n    TPrimaryType extends keyof TTypedData | \"EIP712Domain\" = keyof TTypedData\n  >(\n    params: TypedDataDefinition<TTypedData, TPrimaryType>\n  ): Promise<Hex> => {\n    return this.inner.signTypedData(params);\n  };\n\n  /**\n   * Returns the address of the inner object in a specific hexadecimal format.\n   *\n   * @example\n   * ```ts\n   * import { LocalAccountSigner } from \"@aa-sdk/core\";\n   * import { generatePrivateKey } from \"viem\";\n   *\n   * const signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\n   * const address = await signer.getAddress();\n   * ```\n   *\n   * @returns {Promise<Hex>} A promise that resolves to the address in the format `0x{string}`\n   */\n  readonly getAddress = async (): Promise<`0x${string}`> => {\n    return this.inner.address;\n  };\n\n  /**\n   * Creates a LocalAccountSigner using the provided mnemonic key and optional HD options.\n   *\n   * @example\n   * ```ts\n   * import { LocalAccountSigner } from \"@aa-sdk/core\";\n   * import { generateMnemonic } from \"viem\";\n   *\n   * const signer = LocalAccountSigner.mnemonicToAccountSigner(generateMnemonic());\n   * ```\n   *\n   * @param {string} key The mnemonic key to derive the account from.\n   * @param {HDOptions} [opts] Optional HD options for deriving the account.\n   * @returns {LocalAccountSigner<HDAccount>} A LocalAccountSigner object for the derived account.\n   */\n  static mnemonicToAccountSigner(\n    key: string,\n    opts?: HDOptions\n  ): LocalAccountSigner<HDAccount> {\n    const signer = mnemonicToAccount(key, opts);\n    return new LocalAccountSigner(signer);\n  }\n\n  /**\n   * Creates a `LocalAccountSigner` instance using the provided private key.\n   *\n   * @example\n   * ```ts\n   * import { LocalAccountSigner } from \"@aa-sdk/core\";\n   * import { generatePrivateKey } from \"viem\";\n   *\n   * const signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\n   * ```\n   *\n   * @param {Hex} key The private key in hexadecimal format\n   * @returns {LocalAccountSigner<PrivateKeyAccount>} An instance of `LocalAccountSigner` initialized with the provided private key\n   */\n  static privateKeyToAccountSigner(\n    key: Hex\n  ): LocalAccountSigner<PrivateKeyAccount> {\n    const signer = privateKeyToAccount(key);\n    return new LocalAccountSigner(signer);\n  }\n\n  /**\n   * Generates a new private key and creates a `LocalAccountSigner` for a `PrivateKeyAccount`.\n   *\n   * @example\n   * ```ts\n   * import { LocalAccountSigner } from \"@aa-sdk/core\";\n   *\n   * const signer = LocalAccountSigner.generatePrivateKeySigner();\n   * ```\n   *\n   * @returns {LocalAccountSigner<PrivateKeyAccount>} A `LocalAccountSigner` instance initialized with the generated private key account\n   */\n  static generatePrivateKeySigner(): LocalAccountSigner<PrivateKeyAccount> {\n    const signer = privateKeyToAccount(generatePrivateKey());\n    return new LocalAccountSigner(signer);\n  }\n}\n"]}