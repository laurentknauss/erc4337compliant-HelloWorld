import { type HDAccount, type HDOptions, type Hex, type LocalAccount, type PrivateKeyAccount, type SignableMessage, type TypedDataDefinition } from "viem";
import type { SmartAccountSigner } from "./types.js";
/**
 * Represents a local account signer and provides methods to sign messages and transactions, as well as static methods to create the signer from mnemonic or private key.
 */
export declare class LocalAccountSigner<T extends HDAccount | PrivateKeyAccount | LocalAccount> implements SmartAccountSigner<T> {
    inner: T;
    signerType: string;
    /**
     * A function to initialize an object with an inner parameter and derive a signerType from it.
     *
     * @example
     * ```ts
     * import { LocalAccountSigner } from "@aa-sdk/core";
     * import { privateKeyToAccount, generatePrivateKey } from "viem";
     *
     * const signer = new LocalAccountSigner(
     *  privateKeyToAccount(generatePrivateKey()),
     * );
     * ```
     *
     * @param {T} inner The inner parameter containing the necessary data
     */
    constructor(inner: T);
    /**
     * Signs the provided message using the inner signMessage function.
     *
     * @example
     * ```ts
     * import { LocalAccountSigner } from "@aa-sdk/core";
     * import { generatePrivateKey } from "viem";
     *
     * const signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());
     * const signature = await signer.signMessage("Hello, world!");
     * ```
     *
     * @param {string} message The message to be signed
     * @returns {Promise<any>} A promise that resolves to the signed message
     */
    readonly signMessage: (message: SignableMessage) => Promise<`0x${string}`>;
    /**
     * Signs typed data using the given parameters.
     *
     * @example
     * ```ts
     * import { LocalAccountSigner } from "@aa-sdk/core";
     * import { generatePrivateKey } from "viem";
     *
     * const signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());
     * const signature = await signer.signTypedData({
     *  domain: {},
     *  types: {},
     *  primaryType: "",
     *  message: {},
     * });
     * ```
     *
     * @param {TypedDataDefinition<TTypedData, TPrimaryType>} params The parameters defining the typed data and primary type
     * @returns {Promise<Hex>} A promise that resolves to the signed data in hexadecimal format
     */
    readonly signTypedData: <const TTypedData extends Record<string, unknown> | {
        [x: string]: readonly import("viem").TypedDataParameter[];
        [x: `string[${string}]`]: undefined;
        [x: `function[${string}]`]: undefined;
        [x: `uint256[${string}]`]: undefined;
        [x: `uint48[${string}]`]: undefined;
        [x: `bool[${string}]`]: undefined;
        [x: `bytes[${string}]`]: undefined;
        [x: `address[${string}]`]: undefined;
        [x: `bytes32[${string}]`]: undefined;
        [x: `uint32[${string}]`]: undefined;
        [x: `uint112[${string}]`]: undefined;
        [x: `uint192[${string}]`]: undefined;
        [x: `bytes4[${string}]`]: undefined;
        [x: `uint8[${string}]`]: undefined;
        [x: `uint64[${string}]`]: undefined;
        [x: `bytes6[${string}]`]: undefined;
        [x: `bytes2[${string}]`]: undefined;
        [x: `bytes1[${string}]`]: undefined;
        [x: `bytes5[${string}]`]: undefined;
        [x: `bytes3[${string}]`]: undefined;
        [x: `bytes7[${string}]`]: undefined;
        [x: `bytes11[${string}]`]: undefined;
        [x: `bytes8[${string}]`]: undefined;
        [x: `bytes9[${string}]`]: undefined;
        [x: `bytes10[${string}]`]: undefined;
        [x: `bytes25[${string}]`]: undefined;
        [x: `bytes31[${string}]`]: undefined;
        [x: `bytes30[${string}]`]: undefined;
        [x: `bytes29[${string}]`]: undefined;
        [x: `bytes28[${string}]`]: undefined;
        [x: `bytes27[${string}]`]: undefined;
        [x: `bytes26[${string}]`]: undefined;
        [x: `bytes24[${string}]`]: undefined;
        [x: `bytes23[${string}]`]: undefined;
        [x: `bytes22[${string}]`]: undefined;
        [x: `bytes21[${string}]`]: undefined;
        [x: `bytes20[${string}]`]: undefined;
        [x: `bytes19[${string}]`]: undefined;
        [x: `bytes18[${string}]`]: undefined;
        [x: `bytes17[${string}]`]: undefined;
        [x: `bytes16[${string}]`]: undefined;
        [x: `bytes15[${string}]`]: undefined;
        [x: `bytes14[${string}]`]: undefined;
        [x: `bytes13[${string}]`]: undefined;
        [x: `bytes12[${string}]`]: undefined;
        [x: `int[${string}]`]: undefined;
        [x: `int8[${string}]`]: undefined;
        [x: `int40[${string}]`]: undefined;
        [x: `int32[${string}]`]: undefined;
        [x: `int24[${string}]`]: undefined;
        [x: `int16[${string}]`]: undefined;
        [x: `int48[${string}]`]: undefined;
        [x: `int56[${string}]`]: undefined;
        [x: `int64[${string}]`]: undefined;
        [x: `int72[${string}]`]: undefined;
        [x: `int80[${string}]`]: undefined;
        [x: `int88[${string}]`]: undefined;
        [x: `int96[${string}]`]: undefined;
        [x: `int104[${string}]`]: undefined;
        [x: `int112[${string}]`]: undefined;
        [x: `int120[${string}]`]: undefined;
        [x: `int128[${string}]`]: undefined;
        [x: `int136[${string}]`]: undefined;
        [x: `int144[${string}]`]: undefined;
        [x: `int152[${string}]`]: undefined;
        [x: `int160[${string}]`]: undefined;
        [x: `int168[${string}]`]: undefined;
        [x: `int176[${string}]`]: undefined;
        [x: `int184[${string}]`]: undefined;
        [x: `int192[${string}]`]: undefined;
        [x: `int200[${string}]`]: undefined;
        [x: `int208[${string}]`]: undefined;
        [x: `int216[${string}]`]: undefined;
        [x: `int224[${string}]`]: undefined;
        [x: `int232[${string}]`]: undefined;
        [x: `int240[${string}]`]: undefined;
        [x: `int248[${string}]`]: undefined;
        [x: `int256[${string}]`]: undefined;
        [x: `uint[${string}]`]: undefined;
        [x: `uint40[${string}]`]: undefined;
        [x: `uint24[${string}]`]: undefined;
        [x: `uint16[${string}]`]: undefined;
        [x: `uint56[${string}]`]: undefined;
        [x: `uint72[${string}]`]: undefined;
        [x: `uint80[${string}]`]: undefined;
        [x: `uint88[${string}]`]: undefined;
        [x: `uint96[${string}]`]: undefined;
        [x: `uint104[${string}]`]: undefined;
        [x: `uint120[${string}]`]: undefined;
        [x: `uint128[${string}]`]: undefined;
        [x: `uint136[${string}]`]: undefined;
        [x: `uint144[${string}]`]: undefined;
        [x: `uint152[${string}]`]: undefined;
        [x: `uint160[${string}]`]: undefined;
        [x: `uint168[${string}]`]: undefined;
        [x: `uint176[${string}]`]: undefined;
        [x: `uint184[${string}]`]: undefined;
        [x: `uint200[${string}]`]: undefined;
        [x: `uint208[${string}]`]: undefined;
        [x: `uint216[${string}]`]: undefined;
        [x: `uint224[${string}]`]: undefined;
        [x: `uint232[${string}]`]: undefined;
        [x: `uint240[${string}]`]: undefined;
        [x: `uint248[${string}]`]: undefined;
        string?: undefined;
        uint256?: undefined;
        uint48?: undefined;
        bool?: undefined;
        bytes?: undefined;
        address?: undefined;
        bytes32?: undefined;
        uint32?: undefined;
        uint112?: undefined;
        uint192?: undefined;
        bytes4?: undefined;
        uint8?: undefined;
        uint64?: undefined;
        bytes6?: undefined;
        bytes2?: undefined;
        bytes1?: undefined;
        bytes5?: undefined;
        bytes3?: undefined;
        bytes7?: undefined;
        bytes11?: undefined;
        bytes8?: undefined;
        bytes9?: undefined;
        bytes10?: undefined;
        bytes25?: undefined;
        bytes31?: undefined;
        bytes30?: undefined;
        bytes29?: undefined;
        bytes28?: undefined;
        bytes27?: undefined;
        bytes26?: undefined;
        bytes24?: undefined;
        bytes23?: undefined;
        bytes22?: undefined;
        bytes21?: undefined;
        bytes20?: undefined;
        bytes19?: undefined;
        bytes18?: undefined;
        bytes17?: undefined;
        bytes16?: undefined;
        bytes15?: undefined;
        bytes14?: undefined;
        bytes13?: undefined;
        bytes12?: undefined;
        int8?: undefined;
        int40?: undefined;
        int32?: undefined;
        int24?: undefined;
        int16?: undefined;
        int48?: undefined;
        int56?: undefined;
        int64?: undefined;
        int72?: undefined;
        int80?: undefined;
        int88?: undefined;
        int96?: undefined;
        int104?: undefined;
        int112?: undefined;
        int120?: undefined;
        int128?: undefined;
        int136?: undefined;
        int144?: undefined;
        int152?: undefined;
        int160?: undefined;
        int168?: undefined;
        int176?: undefined;
        int184?: undefined;
        int192?: undefined;
        int200?: undefined;
        int208?: undefined;
        int216?: undefined;
        int224?: undefined;
        int232?: undefined;
        int240?: undefined;
        int248?: undefined;
        int256?: undefined;
        uint40?: undefined;
        uint24?: undefined;
        uint16?: undefined;
        uint56?: undefined;
        uint72?: undefined;
        uint80?: undefined;
        uint88?: undefined;
        uint96?: undefined;
        uint104?: undefined;
        uint120?: undefined;
        uint128?: undefined;
        uint136?: undefined;
        uint144?: undefined;
        uint152?: undefined;
        uint160?: undefined;
        uint168?: undefined;
        uint176?: undefined;
        uint184?: undefined;
        uint200?: undefined;
        uint208?: undefined;
        uint216?: undefined;
        uint224?: undefined;
        uint232?: undefined;
        uint240?: undefined;
        uint248?: undefined;
    }, TPrimaryType extends "EIP712Domain" | keyof TTypedData = keyof TTypedData>(params: TypedDataDefinition<TTypedData, TPrimaryType>) => Promise<Hex>;
    /**
     * Returns the address of the inner object in a specific hexadecimal format.
     *
     * @example
     * ```ts
     * import { LocalAccountSigner } from "@aa-sdk/core";
     * import { generatePrivateKey } from "viem";
     *
     * const signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());
     * const address = await signer.getAddress();
     * ```
     *
     * @returns {Promise<Hex>} A promise that resolves to the address in the format `0x{string}`
     */
    readonly getAddress: () => Promise<`0x${string}`>;
    /**
     * Creates a LocalAccountSigner using the provided mnemonic key and optional HD options.
     *
     * @example
     * ```ts
     * import { LocalAccountSigner } from "@aa-sdk/core";
     * import { generateMnemonic } from "viem";
     *
     * const signer = LocalAccountSigner.mnemonicToAccountSigner(generateMnemonic());
     * ```
     *
     * @param {string} key The mnemonic key to derive the account from.
     * @param {HDOptions} [opts] Optional HD options for deriving the account.
     * @returns {LocalAccountSigner<HDAccount>} A LocalAccountSigner object for the derived account.
     */
    static mnemonicToAccountSigner(key: string, opts?: HDOptions): LocalAccountSigner<HDAccount>;
    /**
     * Creates a `LocalAccountSigner` instance using the provided private key.
     *
     * @example
     * ```ts
     * import { LocalAccountSigner } from "@aa-sdk/core";
     * import { generatePrivateKey } from "viem";
     *
     * const signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());
     * ```
     *
     * @param {Hex} key The private key in hexadecimal format
     * @returns {LocalAccountSigner<PrivateKeyAccount>} An instance of `LocalAccountSigner` initialized with the provided private key
     */
    static privateKeyToAccountSigner(key: Hex): LocalAccountSigner<PrivateKeyAccount>;
    /**
     * Generates a new private key and creates a `LocalAccountSigner` for a `PrivateKeyAccount`.
     *
     * @example
     * ```ts
     * import { LocalAccountSigner } from "@aa-sdk/core";
     *
     * const signer = LocalAccountSigner.generatePrivateKeySigner();
     * ```
     *
     * @returns {LocalAccountSigner<PrivateKeyAccount>} A `LocalAccountSigner` instance initialized with the generated private key account
     */
    static generatePrivateKeySigner(): LocalAccountSigner<PrivateKeyAccount>;
}
