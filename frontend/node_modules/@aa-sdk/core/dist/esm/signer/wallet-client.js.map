{"version":3,"file":"wallet-client.js","sourceRoot":"","sources":["../../../src/signer/wallet-client.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,UAAU,GAMX,MAAM,MAAM,CAAC;AAGd,OAAO,EAAE,sBAAsB,EAAE,MAAM,qBAAqB,CAAC;AAG7D;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAI7B;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,YAAY,MAAoB,EAAE,UAAkB;QAxBpD;;;;;WAAmB;QACnB;;;;;WAAoB;QA+BpB;;;;;;;;;;;;;;;;;;;WAmBG;QACH;;;;mBAA2C,KAAK,IAAI,EAAE;gBACpD,IAAI,SAAS,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;gBAChD,OAAO,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,CAAC;WAAC;QAEF;;;;;;;;;;;;;;;;;;;;WAoBG;QACM;;;;mBACP,KAAK,EAAE,OAAO,EAAE,EAAE;gBAChB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;gBAEhE,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;YACtD,CAAC;WAAC;QAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;WA0BG;QACH;;;;mBAAgB,KAAK,EAInB,SAAwD,EAC1C,EAAE;gBAChB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;gBAEhE,MAAM,MAAM,GAAG;oBACb,OAAO;oBACP,GAAG,SAAS;iBACuD,CAAC;gBAEtE,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAqB,MAAM,CAAC,CAAC;YAC9D,CAAC;WAAC;QArGA,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QACpB,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,MAAM,IAAI,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAC/C,CAAC;QACD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;CAiGF","sourcesContent":["import {\n  getAddress,\n  type Hex,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n  type WalletClient,\n} from \"viem\";\nimport type { Account } from \"viem/accounts\";\nimport type { SignTypedDataParameters } from \"viem/actions\";\nimport { InvalidSignerTypeError } from \"../errors/signer.js\";\nimport type { SmartAccountSigner } from \"./types\";\n\n/**\n * Represents a wallet client signer for smart accounts, providing methods to get the address, sign messages, and sign typed data.\n */\nexport class WalletClientSigner implements SmartAccountSigner<WalletClient> {\n  signerType: string;\n  inner: WalletClient;\n\n  /**\n   * Initializes a signer with a given wallet client and signer type.\n   *\n   * @example\n   * ```ts\n   * import { WalletClientSigner } from \"@aa-sdk/core\";\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum!)\n   * });\n   *\n   * const signer = new WalletClientSigner(client, 'wallet');\n   * ```\n   *\n   * @param {WalletClient} client The wallet client to interact with\n   * @param {string} signerType The type of signer; must be a valid signer type, otherwise an error will be thrown\n   * @throws {InvalidSignerTypeError} If the signer type is invalid\n   */\n  constructor(client: WalletClient, signerType: string) {\n    this.inner = client;\n    if (!signerType) {\n      throw new InvalidSignerTypeError(signerType);\n    }\n    this.signerType = signerType;\n  }\n\n  /**\n   * Asynchronously retrieves addresses from the inner object and returns the first address after applying the `getAddress` function.\n   *\n   * @example\n   * ```ts\n   * import { WalletClientSigner } from \"@aa-sdk/core\";\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum!)\n   * });\n   *\n   * const signer = new WalletClientSigner(client, 'wallet');\n   * console.log(await signer.getAddress());\n   * ```\n   *\n   * @returns {Promise<string>} A promise that resolves to the first address after being processed by the `getAddress` function.\n   */\n  getAddress: () => Promise<`0x${string}`> = async () => {\n    let addresses = await this.inner.getAddresses();\n    return getAddress(addresses[0]);\n  };\n\n  /**\n   * Signs a message using the account's signing method.\n   *\n   * @example\n   * ```ts\n   * import { WalletClientSigner } from \"@aa-sdk/core\";\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum!)\n   * });\n   *\n   * const signer = new WalletClientSigner(client, 'wallet');\n   * console.log(await signer.signMessage(\"hello\"));\n   * ```\n   *\n   * @param {string} message the message string that needs to be signed\n   * @returns {Promise<string>} a promise that resolves to the signed message\n   */\n  readonly signMessage: (message: SignableMessage) => Promise<`0x${string}`> =\n    async (message) => {\n      const account = this.inner.account ?? (await this.getAddress());\n\n      return this.inner.signMessage({ message, account });\n    };\n\n  /**\n   * Signs the provided typed data using the account's private key.\n   *\n   * @example\n   * ```ts\n   * import { WalletClientSigner } from \"@aa-sdk/core\";\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum!)\n   * });\n   *\n   * const signer = new WalletClientSigner(client, 'wallet');\n   * console.log(await signer.signTypedData({\n   *  types: {\n   *    \"Message\": [{ name: \"content\", type: \"string\" }]\n   *  },\n   *  primaryType: \"Message\",\n   *  message: { content: \"Hello\" },\n   * }));\n   * ```\n   *\n   * @param {TypedDataDefinition<TTypedData, TPrimaryType>} typedData The typed data to be signed\n   * @returns {Promise<Hex>} A promise that resolves to a hex string representing the signed data\n   */\n  signTypedData = async <\n    const TTypedData extends TypedData | Record<string, unknown>,\n    TPrimaryType extends keyof TTypedData | \"EIP712Domain\" | string = string\n  >(\n    typedData: TypedDataDefinition<TTypedData, TPrimaryType>\n  ): Promise<Hex> => {\n    const account = this.inner.account ?? (await this.getAddress());\n\n    const params = {\n      account,\n      ...typedData,\n    } as SignTypedDataParameters<TTypedData, string, Account | undefined>;\n\n    return this.inner.signTypedData<TTypedData, string>(params);\n  };\n}\n"]}