import {} from "viem";
import { buildUserOperation } from "../../actions/smartAccount/buildUserOperation.js";
import { buildUserOperationFromTx } from "../../actions/smartAccount/buildUserOperationFromTx.js";
import { buildUserOperationFromTxs } from "../../actions/smartAccount/buildUserOperationFromTxs.js";
import { checkGasSponsorshipEligibility, } from "../../actions/smartAccount/checkGasSponsorshipEligibility.js";
import { dropAndReplaceUserOperation } from "../../actions/smartAccount/dropAndReplaceUserOperation.js";
import { getAddress } from "../../actions/smartAccount/getAddress.js";
import { sendTransaction } from "../../actions/smartAccount/sendTransaction.js";
import { sendTransactions } from "../../actions/smartAccount/sendTransactions.js";
import { sendUserOperation } from "../../actions/smartAccount/sendUserOperation.js";
import { signMessage, } from "../../actions/smartAccount/signMessage.js";
import { signTypedData, } from "../../actions/smartAccount/signTypedData.js";
import { signUserOperation } from "../../actions/smartAccount/signUserOperation.js";
import { upgradeAccount } from "../../actions/smartAccount/upgradeAccount.js";
import { waitForUserOperationTransaction } from "../../actions/smartAccount/waitForUserOperationTransacation.js";
// #endregion SmartAccountClientActions
/**
 * Provides a set of smart account client actions to decorate the provided client. These actions include building and signing user operations, sending transactions, and more.
 *
 * NOTE: this is already added to clients returned from `createSmartAccountClient`
 *
 * @param {Client<TTransport, TChain, TAccount>} client The client to bind the smart account actions to
 * @returns {BaseSmartAccountClientActions<TChain, TAccount, TContext>} An object containing various smart account client actions
 */
export const smartAccountClientActions = (client) => ({
    buildUserOperation: (args) => buildUserOperation(client, args),
    buildUserOperationFromTx: (args, overrides, context) => buildUserOperationFromTx(client, args, overrides, context),
    buildUserOperationFromTxs: (args) => buildUserOperationFromTxs(client, args),
    checkGasSponsorshipEligibility: (args) => checkGasSponsorshipEligibility(client, args),
    signUserOperation: (args) => signUserOperation(client, args),
    dropAndReplaceUserOperation: (args) => dropAndReplaceUserOperation(client, args),
    sendTransaction: (args, overrides, context) => sendTransaction(client, args, overrides, context),
    sendTransactions: (args) => sendTransactions(client, args),
    sendUserOperation: (args) => sendUserOperation(client, args),
    waitForUserOperationTransaction: (args) => waitForUserOperationTransaction.bind(client)(client, args),
    upgradeAccount: (args) => upgradeAccount(client, args),
    getAddress: (args) => getAddress(client, args),
    signMessage: (args) => signMessage(client, args),
    signTypedData: (args) => signTypedData(client, args),
});
export const smartAccountClientMethodKeys = Object.keys(
// @ts-expect-error we just want to get the keys
smartAccountClientActions(undefined)).reduce((accum, curr) => {
    accum.add(curr);
    return accum;
}, new Set());
//# sourceMappingURL=smartAccountClient.js.map