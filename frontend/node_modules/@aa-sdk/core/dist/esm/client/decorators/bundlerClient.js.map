{"version":3,"file":"bundlerClient.js","sourceRoot":"","sources":["../../../../src/client/decorators/bundlerClient.ts"],"names":[],"mappings":"AAUA,OAAO,EAAE,wBAAwB,EAAE,MAAM,mDAAmD,CAAC;AAC7F,OAAO,EAAE,uBAAuB,EAAE,MAAM,kDAAkD,CAAC;AAC3F,OAAO,EAAE,sBAAsB,EAAE,MAAM,iDAAiD,CAAC;AACzF,OAAO,EAAE,uBAAuB,EAAE,MAAM,kDAAkD,CAAC;AAC3F,OAAO,EAAE,oBAAoB,EAAE,MAAM,+CAA+C,CAAC;AA6FrF,8BAA8B;AAE9B;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,cAAc,GASL,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IACjC,wBAAwB,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,EAAE,CACrE,wBAAwB,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,CAAC;IAC1E,oBAAoB,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,CAClD,oBAAoB,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;IACvD,sBAAsB,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CACrC,sBAAsB,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC;IAC1C,uBAAuB,EAAE,KAAK,IAAI,EAAE,CAAC,uBAAuB,CAAC,MAAM,CAAC;IACpE,uBAAuB,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CACtC,uBAAuB,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC;CAC5C,CAAC,CAAC","sourcesContent":["import type {\n  Address,\n  Chain,\n  Client,\n  Hash,\n  PublicRpcSchema,\n  RpcStateOverride,\n  StateOverride,\n  Transport,\n} from \"viem\";\nimport { estimateUserOperationGas } from \"../../actions/bundler/estimateUserOperationGas.js\";\nimport { getSupportedEntryPoints } from \"../../actions/bundler/getSupportedEntryPoints.js\";\nimport { getUserOperationByHash } from \"../../actions/bundler/getUserOperationByHash.js\";\nimport { getUserOperationReceipt } from \"../../actions/bundler/getUserOperationReceipt.js\";\nimport { sendRawUserOperation } from \"../../actions/bundler/sendRawUserOperation.js\";\nimport type { EntryPointVersion } from \"../../entrypoint/types.js\";\nimport type {\n  UserOperationEstimateGasResponse,\n  UserOperationReceipt,\n  UserOperationRequest,\n  UserOperationResponse,\n} from \"../../types.js\";\n\n// Reference: https://eips.ethereum.org/EIPS/eip-4337#rpc-methods-eth-namespace\nexport type BundlerRpcSchema = [\n  {\n    Method: \"eth_sendUserOperation\";\n    Parameters: [UserOperationRequest, Address];\n    ReturnType: Hash;\n  },\n  {\n    Method: \"eth_estimateUserOperationGas\";\n    Parameters: [UserOperationRequest, Address, RpcStateOverride?];\n    ReturnType: UserOperationEstimateGasResponse;\n  },\n  {\n    Method: \"eth_getUserOperationReceipt\";\n    Parameters: [Hash];\n    ReturnType: UserOperationReceipt | null;\n  },\n  {\n    Method: \"eth_getUserOperationByHash\";\n    Parameters: [Hash];\n    ReturnType: UserOperationResponse | null;\n  },\n  {\n    Method: \"eth_supportedEntryPoints\";\n    Parameters: [];\n    ReturnType: Address[];\n  }\n];\n\n// [!region BundlerActions]\nexport type BundlerActions = {\n  /**\n   * calls `eth_estimateUserOperationGas` and  returns the result\n   *\n   * @param request - the UserOperationRequest to estimate gas for\n   * @param entryPoint - the entry point address the op will be sent to\n   * @param stateOverride - the state override to use for the estimation\n   * @returns the gas estimates for the given response\n   */\n  estimateUserOperationGas<\n    TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n  >(\n    request: UserOperationRequest<TEntryPointVersion>,\n    entryPoint: Address,\n    stateOverride?: StateOverride\n  ): Promise<UserOperationEstimateGasResponse<TEntryPointVersion>>;\n\n  /**\n   * calls `eth_sendUserOperation` and returns the hash of the sent UserOperation\n   *\n   * @param request - the UserOperationRequest to send\n   * @param entryPoint - the entry point address the op will be sent to\n   * @returns the hash of the sent UserOperation\n   */\n  sendRawUserOperation<\n    TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n  >(\n    request: UserOperationRequest<TEntryPointVersion>,\n    entryPoint: Address\n  ): Promise<Hash>;\n\n  /**\n   * calls `eth_getUserOperationByHash` and returns the UserOperationResponse\n   *\n   * @param hash - the hash of the UserOperation to fetch\n   * @returns - the user operation if found or null\n   */\n  getUserOperationByHash(hash: Hash): Promise<UserOperationResponse | null>;\n\n  /**\n   * calls `eth_getUserOperationReceipt` and returns the UserOperationReceipt\n   *\n   * @param hash - the hash of the UserOperation to get the receipt for\n   * @returns - a user operation receipt or null if not found\n   */\n  getUserOperationReceipt(hash: Hash): Promise<UserOperationReceipt | null>;\n\n  /**\n   * calls `eth_supportedEntryPoints` and returns the entry points the RPC supports\n   *\n   * @returns - an array of the entrypoint addresses supported\n   */\n  getSupportedEntryPoints(): Promise<Address[]>;\n};\n// [!endregion BundlerActions]\n\n/**\n * A viem client decorator that provides Bundler specific actions.\n * These actions include estimating gas for user operations, sending raw user operations, retrieving user operations by hash, getting supported entry points, and getting user operation receipts.\n *\n * NOTE: this is already added to the client returned from `createBundlerClient`\n *\n * @param {TClient} client The client instance that will be used to perform bundler actions\n * @returns {BundlerActions} An object containing various bundler-related actions that can be executed using the provided client\n */\nexport const bundlerActions: <\n  TClient extends Client<\n    Transport,\n    Chain | undefined,\n    any,\n    [...PublicRpcSchema, ...BundlerRpcSchema]\n  >\n>(\n  client: TClient\n) => BundlerActions = (client) => ({\n  estimateUserOperationGas: async (request, entryPoint, stateOverride) =>\n    estimateUserOperationGas(client, { request, entryPoint, stateOverride }),\n  sendRawUserOperation: async (request, entryPoint) =>\n    sendRawUserOperation(client, { request, entryPoint }),\n  getUserOperationByHash: async (hash) =>\n    getUserOperationByHash(client, { hash }),\n  getSupportedEntryPoints: async () => getSupportedEntryPoints(client),\n  getUserOperationReceipt: async (hash) =>\n    getUserOperationReceipt(client, { hash }),\n});\n"]}