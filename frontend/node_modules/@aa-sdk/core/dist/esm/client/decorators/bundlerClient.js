import { estimateUserOperationGas } from "../../actions/bundler/estimateUserOperationGas.js";
import { getSupportedEntryPoints } from "../../actions/bundler/getSupportedEntryPoints.js";
import { getUserOperationByHash } from "../../actions/bundler/getUserOperationByHash.js";
import { getUserOperationReceipt } from "../../actions/bundler/getUserOperationReceipt.js";
import { sendRawUserOperation } from "../../actions/bundler/sendRawUserOperation.js";
// [!endregion BundlerActions]
/**
 * A viem client decorator that provides Bundler specific actions.
 * These actions include estimating gas for user operations, sending raw user operations, retrieving user operations by hash, getting supported entry points, and getting user operation receipts.
 *
 * NOTE: this is already added to the client returned from `createBundlerClient`
 *
 * @param {TClient} client The client instance that will be used to perform bundler actions
 * @returns {BundlerActions} An object containing various bundler-related actions that can be executed using the provided client
 */
export const bundlerActions = (client) => ({
    estimateUserOperationGas: async (request, entryPoint, stateOverride) => estimateUserOperationGas(client, { request, entryPoint, stateOverride }),
    sendRawUserOperation: async (request, entryPoint) => sendRawUserOperation(client, { request, entryPoint }),
    getUserOperationByHash: async (hash) => getUserOperationByHash(client, { hash }),
    getSupportedEntryPoints: async () => getSupportedEntryPoints(client),
    getUserOperationReceipt: async (hash) => getUserOperationReceipt(client, { hash }),
});
//# sourceMappingURL=bundlerClient.js.map