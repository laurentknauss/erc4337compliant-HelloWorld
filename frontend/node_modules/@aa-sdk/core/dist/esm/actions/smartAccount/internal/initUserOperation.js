import { AccountNotFoundError } from "../../../errors/account.js";
import { ChainNotFoundError } from "../../../errors/client.js";
import { conditionalReturn } from "../../../utils/index.js";
/**
 * Description internal action function of SmartAccountClient for initializing
 * a user operation for the sender account
 *
 * @template {Transport} TTransport
 * @template {Chain | undefined} TChain
 * @template {SmartContractAccount | undefined} TAccount
 * @template {UserOperationContext | undefined} TContext
 * @template {GetEntryPointFromAccount} TEntryPointVersion
 * @param {BaseSmartAccountClient<TTransport, TChain, TAccount>} client smart account client
 * @param {SendUserOperationParameters<TAccount, TContext, TEntryPointVersion> | BuildUserOperationParameters<TAccount, TContext, TEntryPointVersion>} args send user operation parameters
 * @returns {Promise<Deferrable<UserOperationStruct<TEntryPointVersion>>>} initialized user operation struct
 */
export async function _initUserOperation(client, args) {
    const { account = client.account, uo, overrides } = args;
    if (!account) {
        throw new AccountNotFoundError();
    }
    if (!client.chain) {
        throw new ChainNotFoundError();
    }
    const entryPoint = account.getEntryPoint();
    const callData = Array.isArray(uo)
        ? account.encodeBatchExecute(uo)
        : typeof uo === "string"
            ? uo
            : account.encodeExecute(uo);
    const signature = account.getDummySignature();
    const nonce = account.getAccountNonce(overrides?.nonceKey);
    const struct = entryPoint.version === "0.6.0"
        ? {
            initCode: account.getInitCode(),
            sender: account.address,
            nonce,
            callData,
            signature,
        }
        : {
            factory: conditionalReturn(account.isAccountDeployed().then((deployed) => !deployed), account.getFactoryAddress),
            factoryData: conditionalReturn(account.isAccountDeployed().then((deployed) => !deployed), account.getFactoryData),
            sender: account.address,
            nonce,
            callData,
            signature,
        };
    return struct;
}
//# sourceMappingURL=initUserOperation.js.map