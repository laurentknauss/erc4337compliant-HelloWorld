import { isBaseSmartAccountClient } from "../../client/isSmartAccountClient.js";
import { AccountNotFoundError } from "../../errors/account.js";
import { IncompatibleClientError } from "../../errors/client.js";
import { bigIntMax, bigIntMultiply, resolveProperties, } from "../../utils/index.js";
import { _runMiddlewareStack } from "./internal/runMiddlewareStack.js";
import { _sendUserOperation } from "./internal/sendUserOperation.js";
/**
 * Drops an existing user operation and replaces it with a new one while ensuring the appropriate fees and overrides are applied.
 *
 * @example
 * ```ts
 * import {
 *  createSmartAccountClient,
 * } from "@aa-sdk/core";
 *
 * // smart account client is already extended with dropAndReplaceUserOperation
 * const client = createSmartAccountClient(...);
 * const { request } = await client.sendUserOperation(...);
 * const result = await client.dropAndReplaceUserOperation({
 *  uoToDrop: request,
 *  account, // only required if the client above is not connected to an account
 * });
 * ```
 *
 * @param {Client<TTransport, TChain, TAccount>} client The client instance with the transport, chain, and account information
 * @param {DropAndReplaceUserOperationParameters<TAccount, TContext>} args The parameters required for dropping and replacing the user operation including the account, operation to drop, overrides, and context
 * @returns {Promise<SendUserOperationResult<TEntryPointVersion>>} A promise that resolves to the result of sending the new user operation
 */
export async function dropAndReplaceUserOperation(client, args) {
    const { account = client.account, uoToDrop, overrides, context } = args;
    if (!account) {
        throw new AccountNotFoundError();
    }
    if (!isBaseSmartAccountClient(client)) {
        throw new IncompatibleClientError("BaseSmartAccountClient", "dropAndReplaceUserOperation", client);
    }
    const entryPoint = account.getEntryPoint();
    const uoToSubmit = (entryPoint.version === "0.6.0"
        ? {
            initCode: uoToDrop.initCode,
            sender: uoToDrop.sender,
            nonce: uoToDrop.nonce,
            callData: uoToDrop.callData,
            signature: await account.getDummySignature(),
        }
        : {
            ...(uoToDrop.factory &&
                uoToDrop.factoryData
                ? {
                    factory: uoToDrop.factory,
                    factoryData: uoToDrop
                        .factoryData,
                }
                : {}),
            sender: uoToDrop.sender,
            nonce: uoToDrop.nonce,
            callData: uoToDrop.callData,
            signature: await account.getDummySignature(),
        });
    // If the fee estimator is not the one estimating fees, then this won't work
    // however, we have migrated to using erc7677middleware for alchemy paymaster flows
    // and most of the other paymasters we've seen don't do fee estimation
    const { maxFeePerGas, maxPriorityFeePerGas } = await resolveProperties(await client.middleware.feeEstimator(uoToSubmit, { account, client }));
    const _overrides = {
        ...overrides,
        maxFeePerGas: bigIntMax(BigInt(maxFeePerGas ?? 0n), bigIntMultiply(uoToDrop.maxFeePerGas, 1.1)),
        maxPriorityFeePerGas: bigIntMax(BigInt(maxPriorityFeePerGas ?? 0n), bigIntMultiply(uoToDrop.maxPriorityFeePerGas, 1.1)),
    };
    const uoToSend = await _runMiddlewareStack(client, {
        uo: uoToSubmit,
        overrides: _overrides,
        account,
    });
    return _sendUserOperation(client, {
        uoStruct: uoToSend,
        account,
        context,
        overrides: _overrides,
    });
}
//# sourceMappingURL=dropAndReplaceUserOperation.js.map