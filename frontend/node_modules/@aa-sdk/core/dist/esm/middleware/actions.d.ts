import { type Chain, type Client, type PublicActions, type PublicRpcSchema, type Transport } from "viem";
import type { SmartContractAccount } from "../account/smartContractAccount.js";
import type { BundlerActions, BundlerRpcSchema } from "../client/decorators/bundlerClient.js";
import type { ClientMiddlewareConfig } from "../client/types.js";
import type { ClientMiddleware } from "./types.js";
/**
 * Middleware client type
 *
 * @template {Transport} TTransport
 * @template {Chain | undefined} TChain
 * @template {SmartContractAccount | undefined} TAccount
 */
export type MiddlewareClient<TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined> = Client<TTransport, TChain, TAccount, [
    ...BundlerRpcSchema,
    ...PublicRpcSchema
], PublicActions & BundlerActions>;
/**
 * function that takes in ClientMiddlewareConfig used during client initiation
 * and returns the middleware actions object that the smart account client extends with
 *
 * @param {ClientMiddlewareConfig} overrides config used during client initiation for overriding default middlewares
 * @returns {(client: MiddlewareClient<TTransport, TChain, TAccount>) => { middleware: ClientMiddleware }} middleware actions object
 */
export declare const middlewareActions: (overrides: ClientMiddlewareConfig) => <TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined>(client: MiddlewareClient<TTransport, TChain, TAccount>) => {
    middleware: ClientMiddleware;
};
