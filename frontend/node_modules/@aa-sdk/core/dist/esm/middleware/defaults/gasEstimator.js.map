{"version":3,"file":"gasEstimator.js","sourceRoot":"","sources":["../../../../src/middleware/defaults/gasEstimator.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACtE,OAAO,EAAE,8BAA8B,EAAE,MAAM,uBAAuB,CAAC;AAIvE;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAG9B,CAAC,MAAwB,EAAsB,EAAE,CACjD,KAAK,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,EAAE,EAAE;IACnD,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;IAE7D,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,wBAAwB,CACrD,OAAO,EACP,OAAO,CAAC,aAAa,EAAE,CAAC,OAAO,EAC/B,SAAS,EAAE,aAAa,CACzB,CAAC;IAEF,MAAM,YAAY,GAAG,8BAA8B,CACjD,SAAS,CAAC,YAAY,EACtB,SAAS,EAAE,YAAY,EACvB,UAAU,EAAE,YAAY,CACzB,CAAC;IACF,MAAM,oBAAoB,GAAG,8BAA8B,CACzD,SAAS,CAAC,oBAAoB,EAC9B,SAAS,EAAE,oBAAoB,EAC/B,UAAU,EAAE,oBAAoB,CACjC,CAAC;IACF,MAAM,kBAAkB,GAAG,8BAA8B,CACvD,SAAS,CAAC,kBAAkB,EAC5B,SAAS,EAAE,kBAAkB,EAC7B,UAAU,EAAE,kBAAkB,CAC/B,CAAC;IAEF,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,MAAM,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;IACnD,MAAM,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAE/C,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAC3C,IAAI,UAAU,CAAC,OAAO,KAAK,OAAO,EAAE,CAAC;QACnC,MAAM,6BAA6B,GAAG,8BAA8B,CAClE,SAAS,CAAC,6BAA6B,EACtC,SAA6C;YAC5C,EAAE,6BAA6B,EAChC,UAA+C;YAC9C,EAAE,6BAA6B,CAClC,CAAC;QACF,MAAM,KAAK,GAAG,MAAsC,CAAC;QAErD,KAAK,CAAC,6BAA6B,GAAG,6BAA6B,CAAC;QAEpE,KAAK,CAAC,uBAAuB;YAC3B,KAAK,CAAC,uBAAuB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IAC3E,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type {\n  UserOperationFeeOptions,\n  UserOperationOverrides,\n  UserOperationStruct,\n} from \"../../types.js\";\nimport { deepHexlify, resolveProperties } from \"../../utils/index.js\";\nimport { applyUserOpOverrideOrFeeOption } from \"../../utils/userop.js\";\nimport type { MiddlewareClient } from \"../actions.js\";\nimport type { ClientMiddlewareFn } from \"../types.js\";\n\n/**\n * Description default gas estimator middleware for `SmartAccountClient`\n * You can override this middleware with your custom gas estimator middleware\n * by passing it to the client constructor\n *\n * @param {MiddlewareClient} client smart account client instance to apply the middleware to\n * @returns {ClientMiddlewareFn} middleware execution function used to estimate gas for user operations\n */\nexport const defaultGasEstimator: <C extends MiddlewareClient>(\n  client: C\n) => ClientMiddlewareFn =\n  (client: MiddlewareClient): ClientMiddlewareFn =>\n  async (struct, { account, overrides, feeOptions }) => {\n    const request = deepHexlify(await resolveProperties(struct));\n\n    const estimates = await client.estimateUserOperationGas(\n      request,\n      account.getEntryPoint().address,\n      overrides?.stateOverride\n    );\n\n    const callGasLimit = applyUserOpOverrideOrFeeOption(\n      estimates.callGasLimit,\n      overrides?.callGasLimit,\n      feeOptions?.callGasLimit\n    );\n    const verificationGasLimit = applyUserOpOverrideOrFeeOption(\n      estimates.verificationGasLimit,\n      overrides?.verificationGasLimit,\n      feeOptions?.verificationGasLimit\n    );\n    const preVerificationGas = applyUserOpOverrideOrFeeOption(\n      estimates.preVerificationGas,\n      overrides?.preVerificationGas,\n      feeOptions?.preVerificationGas\n    );\n\n    struct.callGasLimit = callGasLimit;\n    struct.verificationGasLimit = verificationGasLimit;\n    struct.preVerificationGas = preVerificationGas;\n\n    const entryPoint = account.getEntryPoint();\n    if (entryPoint.version === \"0.7.0\") {\n      const paymasterVerificationGasLimit = applyUserOpOverrideOrFeeOption(\n        estimates.paymasterVerificationGasLimit,\n        (overrides as UserOperationOverrides<\"0.7.0\">)\n          ?.paymasterVerificationGasLimit,\n        (feeOptions as UserOperationFeeOptions<\"0.7.0\">)\n          ?.paymasterVerificationGasLimit\n      );\n      const uo_v7 = struct as UserOperationStruct<\"0.7.0\">;\n\n      uo_v7.paymasterVerificationGasLimit = paymasterVerificationGasLimit;\n\n      uo_v7.paymasterPostOpGasLimit =\n        uo_v7.paymasterPostOpGasLimit ?? (uo_v7.paymaster ? \"0x0\" : undefined);\n    }\n\n    return struct;\n  };\n"]}