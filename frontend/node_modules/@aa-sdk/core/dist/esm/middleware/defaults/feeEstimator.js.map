{"version":3,"file":"feeEstimator.js","sourceRoot":"","sources":["../../../../src/middleware/defaults/feeEstimator.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,8BAA8B,EAAE,MAAM,sBAAsB,CAAC;AAItE;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,UAAU,mBAAmB,CACjC,MAAS;IAET,OAAO,KAAK,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,UAAU,EAAE,EAAE,EAAE;QACjD,4EAA4E;QAC5E,iGAAiG;QACjG,EAAE;QACF,iGAAiG;QACjG,iEAAiE;QACjE,EAAE;QACF,8EAA8E;QAC9E,mEAAmE;QAEnE,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,kBAAkB,EAAE,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,oBAAoB,IAAI,IAAI,EAAE,CAAC;YAClE,MAAM,IAAI,KAAK,CACb,yDAAyD,CAC1D,CAAC;QACJ,CAAC;QAED,IAAI,oBAAoB,GACtB,MAAM,MAAM,CAAC,4BAA4B,EAAE,CAAC;QAE9C,oBAAoB,GAAG,8BAA8B,CACnD,oBAAoB,EACpB,SAAS,EAAE,oBAAoB,EAC/B,UAAU,EAAE,oBAAoB,CACjC,CAAC;QAEF,IAAI,YAAY,GACd,OAAO,CAAC,YAAY;YACpB,OAAO,CAAC,oBAAoB;YAC5B,MAAM,CAAC,oBAAoB,CAAC,CAAC;QAE/B,YAAY,GAAG,8BAA8B,CAC3C,YAAY,EACZ,SAAS,EAAE,YAAY,EACvB,UAAU,EAAE,YAAY,CACzB,CAAC;QAEF,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC;QACnC,MAAM,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACnD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import type { BigNumberish } from \"../../types\";\nimport { applyUserOpOverrideOrFeeOption } from \"../../utils/index.js\";\nimport type { MiddlewareClient } from \"../actions\";\nimport type { ClientMiddlewareFn } from \"../types\";\n\n/**\n * Default fee estimator middleware function that estimates the maximum fee per gas and maximum priority fee per gas for a given client and applies the necessary overrides and fee options.\n *\n * @example\n * ```ts\n * import { createSmartAccountClient, defaultFeeEstimator, createBundlerClient } from \"@aa-sdk/core\";\n *\n * const bundlerClient = createBundlerClient(...);\n *\n * // NOTE: this is already provided by the smart account client\n * const client = createSmartAccountClient({\n *  feeEstimator: defaultFeeEstimator(bundlerClient),\n *  ...otherParams\n * });\n * ```\n *\n * @template {MiddlewareClient} C The type of the client\n * @param {C} client The client to perform the fee estimation\n * @returns {ClientMiddlewareFn} A middleware function that takes in the struct and options, estimates the fees, and updates the struct with the estimated fees\n */\nexport function defaultFeeEstimator<C extends MiddlewareClient>(\n  client: C\n): ClientMiddlewareFn {\n  return async (struct, { overrides, feeOptions }) => {\n    // maxFeePerGas must be at least the sum of maxPriorityFeePerGas and baseFee\n    // so we need to accommodate for the fee option applied maxPriorityFeePerGas for the maxFeePerGas\n    //\n    // Note that if maxFeePerGas is not at least the sum of maxPriorityFeePerGas and required baseFee\n    // after applying the fee options, then the transaction will fail\n    //\n    // Refer to https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\n    // for more information about maxFeePerGas and maxPriorityFeePerGas\n\n    const feeData = await client.estimateFeesPerGas();\n    if (!feeData.maxFeePerGas || feeData.maxPriorityFeePerGas == null) {\n      throw new Error(\n        \"feeData is missing maxFeePerGas or maxPriorityFeePerGas\"\n      );\n    }\n\n    let maxPriorityFeePerGas: BigNumberish =\n      await client.estimateMaxPriorityFeePerGas();\n\n    maxPriorityFeePerGas = applyUserOpOverrideOrFeeOption(\n      maxPriorityFeePerGas,\n      overrides?.maxPriorityFeePerGas,\n      feeOptions?.maxPriorityFeePerGas\n    );\n\n    let maxFeePerGas: BigNumberish =\n      feeData.maxFeePerGas -\n      feeData.maxPriorityFeePerGas +\n      BigInt(maxPriorityFeePerGas);\n\n    maxFeePerGas = applyUserOpOverrideOrFeeOption(\n      maxFeePerGas,\n      overrides?.maxFeePerGas,\n      feeOptions?.maxFeePerGas\n    );\n\n    struct.maxFeePerGas = maxFeePerGas;\n    struct.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    return struct;\n  };\n}\n"]}