{"version":3,"file":"erc7677middleware.js","sourceRoot":"","sources":["../../../src/middleware/erc7677middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  toHex,\n  type Address,\n  type Chain,\n  type Client,\n  type Hex,\n  type Transport,\n} from \"viem\";\nimport type { ClientMiddlewareConfig } from \"../client/types\";\nimport type { EntryPointVersion } from \"../entrypoint/types\";\nimport { ChainNotFoundError } from \"../errors/client.js\";\nimport type {\n  UserOperationFeeOptions,\n  UserOperationOverrides,\n  UserOperationRequest,\n  UserOperationStruct,\n} from \"../types\";\nimport {\n  deepHexlify,\n  resolveProperties,\n  type Deferrable,\n} from \"../utils/index.js\";\nimport type { ClientMiddlewareFn } from \"./types\";\n\nexport type Erc7677RpcSchema<\n  TContext extends Record<string, any> = Record<string, any>\n> = [\n  {\n    Method: \"pm_getPaymasterStubData\";\n    Parameters: [UserOperationRequest, Address, Hex, TContext];\n    ReturnType: {\n      sponsor?: { name: string; icon?: string }; // Sponsor info\n      paymaster?: Address; // Paymaster address (entrypoint v0.7)\n      paymasterData?: Hex; // Paymaster data (entrypoint v0.7)\n      paymasterVerificationGasLimit?: Hex; // Paymaster validation gas (entrypoint v0.7)\n      paymasterPostOpGasLimit?: Hex; // Paymaster post-op gas (entrypoint v0.7)\n      paymasterAndData?: Hex; // Paymaster and data (entrypoint v0.6)\n      isFinal?: boolean; // Indicates that the caller does not need to call pm_getPaymasterData\n    };\n  },\n  {\n    Method: \"pm_getPaymasterData\";\n    Parameters: [UserOperationRequest, Address, Hex, TContext];\n    ReturnType: {\n      paymaster?: Address; // Paymaster address (entrypoint v0.7)\n      paymasterData?: Hex; // Paymaster data (entrypoint v0.7)\n      paymasterAndData?: Hex; // Paymaster and data (entrypoint v0.6)\n    };\n  }\n];\n\nexport type Erc7677Client<\n  T extends Transport = Transport,\n  TContext extends Record<string, any> = Record<string, any>\n> = Client<T, Chain, undefined, Erc7677RpcSchema<TContext>>;\n\nexport type Erc7677MiddlewareParams<\n  TContext extends Record<string, any> | undefined =\n    | Record<string, any>\n    | undefined,\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n> = {\n  context?:\n    | ((\n        struct: Deferrable<UserOperationStruct<TEntryPointVersion>>,\n        args: {\n          overrides?: UserOperationOverrides<TEntryPointVersion>;\n          feeOptions?: UserOperationFeeOptions;\n        }\n      ) => Promise<TContext>)\n    | TContext;\n};\n\n/**\n * Middleware function for interacting with ERC-7677 enabled clients. It supports resolving paymaster and data fields for user operations.\n * This middleware assumes that your RPC provider supports the ERC-7677 methods (pm_getPaymasterStubData and pm_getPaymasterData).\n *\n * @example\n * ```ts\n * import { createSmartAccountClient, erc7677Middleware } from \"@aa-sdk/core\";\n * import { http } from \"viem\";\n * import { sepolia } from \"viem/chains\";\n *\n * const client = createSmartAccountClient({\n *  transport: http(\"rpc-url\"),\n *  chain: sepolia,\n *  // this assumes that your RPC provider supports the ERC-7677 methods AND takes no context\n *  ...erc7677Middleware(),\n * })\n * ```\n *\n * @param {Erc7677MiddlewareParams<TContext>} params Middleware parameters including context function or object. Context can be resolved dynamically by passing in a function which takes in the context at the time of sending a user op\n * @returns {Pick<ClientMiddlewareConfig, \"dummyPaymasterAndData\" | \"paymasterAndData\">} An object containing middleware functions `dummyPaymasterAndData` and `paymasterAndData` for processing user operations with the paymaster data\n */\nexport function erc7677Middleware<\n  TContext extends Record<string, any> | undefined =\n    | Record<string, any>\n    | undefined\n>(\n  params?: Erc7677MiddlewareParams<TContext>\n): Pick<ClientMiddlewareConfig, \"dummyPaymasterAndData\" | \"paymasterAndData\"> {\n  const dummyPaymasterAndData: ClientMiddlewareFn = async (\n    uo,\n    { client, account, feeOptions, overrides }\n  ) => {\n    const userOp = deepHexlify(await resolveProperties(uo));\n\n    // Those values will be set after fee estimation.\n    userOp.maxFeePerGas = \"0x0\";\n    userOp.maxPriorityFeePerGas = \"0x0\";\n    userOp.callGasLimit = \"0x0\";\n    userOp.verificationGasLimit = \"0x0\";\n    userOp.preVerificationGas = \"0x0\";\n\n    const entrypoint = account.getEntryPoint();\n\n    if (entrypoint.version === \"0.7.0\") {\n      userOp.paymasterVerificationGasLimit = \"0x0\";\n      userOp.paymasterPostOpGasLimit = \"0x0\";\n    }\n\n    const context =\n      (typeof params?.context === \"function\"\n        ? await params?.context(userOp, { overrides, feeOptions })\n        : params?.context) ?? {};\n\n    if (!client.chain) {\n      throw new ChainNotFoundError();\n    }\n\n    const erc7677client = client as Erc7677Client;\n    // TODO: probably need to handle the sponsor and isFinal fields\n    const {\n      paymaster,\n      paymasterAndData,\n      paymasterData,\n      paymasterPostOpGasLimit,\n      paymasterVerificationGasLimit,\n    } = await erc7677client.request({\n      method: \"pm_getPaymasterStubData\",\n      params: [userOp, entrypoint.address, toHex(client.chain.id), context],\n    });\n\n    if (entrypoint.version === \"0.6.0\") {\n      return {\n        ...uo,\n        paymasterAndData,\n      };\n    }\n\n    return {\n      ...uo,\n      paymaster,\n      paymasterData,\n      paymasterPostOpGasLimit,\n      paymasterVerificationGasLimit,\n    };\n  };\n\n  const paymasterAndData: ClientMiddlewareFn = async (\n    uo,\n    { client, account, feeOptions, overrides }\n  ) => {\n    const userOp = deepHexlify(await resolveProperties(uo));\n    const context =\n      (typeof params?.context === \"function\"\n        ? await params?.context(userOp, { overrides, feeOptions })\n        : params?.context) ?? {};\n\n    if (!client.chain) {\n      throw new ChainNotFoundError();\n    }\n\n    const erc7677client = client as Erc7677Client;\n\n    const entrypoint = account.getEntryPoint();\n    const { paymaster, paymasterAndData, paymasterData } =\n      await erc7677client.request({\n        method: \"pm_getPaymasterData\",\n        params: [userOp, entrypoint.address, toHex(client.chain.id), context],\n      });\n\n    if (entrypoint.version === \"0.6.0\") {\n      return {\n        ...uo,\n        paymasterAndData,\n      };\n    }\n\n    return {\n      ...uo,\n      paymaster,\n      paymasterData,\n    };\n  };\n\n  return {\n    dummyPaymasterAndData,\n    paymasterAndData,\n  };\n}\n"]}