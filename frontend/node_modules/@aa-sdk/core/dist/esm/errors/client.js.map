{"version":3,"file":"client.js","sourceRoot":"","sources":["../../../src/errors/client.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AAEtC;;GAEG;AACH,MAAM,OAAO,uBAAwB,SAAQ,SAAS;IAGpD;;;;;;OAMG;IACH,YAAY,cAAsB,EAAE,MAAc,EAAE,MAAc;QAChE,KAAK,CACH;YACE,mBAAmB,MAAM,CAAC,IAAI,cAAc,cAAc,GAAG;YAC7D,qEAAqE,MAAM,IAAI;SAChF,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;QAfK;;;;mBAAO,yBAAyB;WAAC;IAgB1C,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,kBAAmB,SAAQ,SAAS;IAG/C;;;;OAIG;IACH,YAAY,MAAe;QACzB,KAAK,CAAC,mBAAmB,MAAM,EAAE,CAAC,CAAC;QAR5B;;;;mBAAO,oBAAoB;WAAC;IASrC,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,kBAAmB,SAAQ,SAAS;IAG/C;;OAEG;IACH;QACE,KAAK,CAAC,iCAAiC,CAAC,CAAC;QANlC;;;;mBAAO,oBAAoB;WAAC;IAOrC,CAAC;CACF","sourcesContent":["import type { Client } from \"viem\";\nimport { BaseError } from \"./base.js\";\n\n/**\n * Represents an error thrown when a client is not compatible with the expected client type for a specific method. The error message provides guidance on how to create a compatible client.\n */\nexport class IncompatibleClientError extends BaseError {\n  override name = \"IncompatibleClientError\";\n\n  /**\n   * Throws an error when the client type does not match the expected client type.\n   *\n   * @param {string} expectedClient The expected type of the client.\n   * @param {string} method The method that was called.\n   * @param {Client} client The client instance.\n   */\n  constructor(expectedClient: string, method: string, client: Client) {\n    super(\n      [\n        `Client of type (${client.type}) is not a ${expectedClient}.`,\n        `Create one with \\`createSmartAccountClient\\` first before using \\`${method}\\``,\n      ].join(\"\\n\")\n    );\n  }\n}\n\n/**\n * Represents an error that occurs when an invalid RPC URL is provided. This class extends the `BaseError` class and includes the invalid URL in the error message.\n */\nexport class InvalidRpcUrlError extends BaseError {\n  override name = \"InvalidRpcUrlError\";\n\n  /**\n   * Creates an instance of an error with a message indicating an invalid RPC URL.\n   *\n   * @param {string} [rpcUrl] The invalid RPC URL that caused the error\n   */\n  constructor(rpcUrl?: string) {\n    super(`Invalid RPC URL ${rpcUrl}`);\n  }\n}\n\n/**\n * Error class representing a \"Chain Not Found\" error, typically thrown when no chain is supplied to the client.\n */\nexport class ChainNotFoundError extends BaseError {\n  override name = \"ChainNotFoundError\";\n\n  /**\n   * Initializes a new instance of the error message with a default message indicating that no chain was supplied to the client.\n   */\n  constructor() {\n    super(\"No chain supplied to the client\");\n  }\n}\n"]}