{"version":3,"file":"account.js","sourceRoot":"","sources":["../../../src/errors/account.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AAEtC;;GAEG;AACH,MAAM,OAAO,oBAAqB,SAAQ,SAAS;IAGjD,oDAAoD;IAEpD;;OAEG,CAAC;QACF,KAAK,CAAC,wDAAwD,CAAC,CAAC;QAPzD;;;;mBAAO,sBAAsB;WAAC;IAQvC,CAAC;CACF;AAED;;;GAGG;AACH,MAAM,OAAO,6BAA8B,SAAQ,SAAS;IAG1D;;;;;;OAMG;IACH,YAAY,WAAmB,EAAE,KAAY,EAAE,OAA0B;QACvE,KAAK,CACH;YACE,0BAA0B,WAAW,mBAAmB,KAAK,CAAC,IAAI,2BAA2B,OAAO,EAAE;YACtG,gFAAgF;SACjF,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;QAfK;;;;mBAAO,+BAA+B;WAAC;IAgBhD,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,6BAA8B,SAAQ,SAAS;IAG1D;;OAEG,CAAC;QACF,KAAK,CAAC,iCAAiC,CAAC,CAAC;QALlC;;;;mBAAO,+BAA+B;WAAC;IAMhD,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,yBAA0B,SAAQ,SAAS;IAGtD;;;;OAIG;IACH,YAAY,WAAmB;QAC7B,KAAK,CAAC,iCAAiC,WAAW,EAAE,CAAC,CAAC;QAR/C;;;;mBAAO,sBAAsB;WAAC;IASvC,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,gCAAiC,SAAQ,SAAS;IAG7D;;;;OAIG,CAAC;QACF,KAAK,CAAC,qDAAqD,CAAC,CAAC;QAPtD;;;;mBAAO,6BAA6B;WAAC;IAQ9C,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,2BAA4B,SAAQ,SAAS;IAGxD;;;;;OAKG;IACH,YAAY,IAAY,EAAE,cAAsB;QAC9C,KAAK,CAAC,8BAA8B,IAAI,KAAK,cAAc,GAAG,CAAC,CAAC;QATzD;;;;mBAAO,6BAA6B;WAAC;IAU9C,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,+BAAgC,SAAQ,SAAS;IAG5D;;;;OAIG;IACH,YAAY,WAAmB;QAC7B,KAAK,CAAC,uCAAuC,WAAW,EAAE,CAAC,CAAC;QARrD;;;;mBAAO,iCAAiC;WAAC;IASlD,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,yBAA0B,SAAQ,SAAS;IAGtD;;;;OAIG;IACH,YAAY,WAAmB;QAC7B,KAAK,CAAC,mBAAmB,WAAW,+BAA+B,CAAC,CAAC;QAR9D;;;;mBAAO,2BAA2B;WAAC;IAS5C,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,iCAAkC,SAAQ,SAAS;IAG9D;;;;OAIG;IACH,YAAY,WAAmB;QAC7B,KAAK,CAAC,wCAAwC,WAAW,EAAE,CAAC,CAAC;QARtD;;;;mBAAO,mCAAmC;WAAC;IASpD,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,oBAAqB,SAAQ,SAAS;IAGjD;;;;;OAKG;IACH,YAAY,QAAgB,EAAE,MAAc;QAC1C,KAAK,CAAC,yBAAyB,QAAQ,SAAS,MAAM,EAAE,CAAC,CAAC;QATnD;;;;mBAAO,2BAA2B;WAAC;IAU5C,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,mCAAoC,SAAQ,SAAS;IAGhE;;OAEG,CAAC;QACF,KAAK,CAAC,iCAAiC,CAAC,CAAC;QALlC;;;;mBAAO,qCAAqC;WAAC;IAMtD,CAAC;CACF","sourcesContent":["import type { Chain } from \"viem\";\nimport type { EntryPointVersion } from \"../entrypoint/types.js\";\nimport { BaseError } from \"./base.js\";\n\n/**\n * This error is thrown when an account could not be found to execute a specific action. It extends the `BaseError` class.\n */\nexport class AccountNotFoundError extends BaseError {\n  override name = \"AccountNotFoundError\";\n\n  // TODO: extend this further using docs path as well\n\n  /**\n   * Constructor for initializing an error message indicating that an account could not be found to execute the specified action.\n   */ constructor() {\n    super(\"Could not find an Account to execute with this Action.\");\n  }\n}\n\n/**\n * Represents an error that is thrown when no default factory is defined for a specific account type on a given chain and entry point version.\n * This error suggests providing an override via the `factoryAddress` parameter when creating an account.\n */\nexport class DefaultFactoryNotDefinedError extends BaseError {\n  override name = \"DefaultFactoryNotDefinedError\";\n\n  /**\n   * Constructs an error message indicating that no default factory was found for the given account type, chain, and entry point version.\n   *\n   * @param {string} accountType the type of account\n   * @param {Chain} chain the blockchain chain\n   * @param {EntryPointVersion} version the entry point version\n   */\n  constructor(accountType: string, chain: Chain, version: EntryPointVersion) {\n    super(\n      [\n        `No default factory for ${accountType} found on chain ${chain.name} for entrypoint version ${version}`,\n        \"Supply an override via the `factoryAddress` parameter when creating an account\",\n      ].join(\"\\n\")\n    );\n  }\n}\n\n/**\n * Custom error class for handling errors when getting a counterfactual address. This extends the `BaseError` class and provides a custom error message and name.\n */\nexport class GetCounterFactualAddressError extends BaseError {\n  override name = \"GetCounterFactualAddressError\";\n\n  /**\n   * Constructor for initializing an error message indicating the failure of fetching the counter-factual address.\n   */ constructor() {\n    super(\"getCounterFactualAddress failed\");\n  }\n}\n\n/**\n * An error class representing the condition where upgrades are not supported for a specific account type. This error extends the `BaseError` class and provides a custom error message based on the account type.\n */\nexport class UpgradesNotSupportedError extends BaseError {\n  override name = \"UpgradesNotSupported\";\n\n  /**\n   * Error constructor for indicating that upgrades are not supported by the given account type.\n   *\n   * @param {string} accountType The type of account that does not support upgrades\n   */\n  constructor(accountType: string) {\n    super(`Upgrades are not supported by ${accountType}`);\n  }\n}\n\n/**\n * Error thrown when attempting to sign a transaction that is not supported by smart contracts.\n */\nexport class SignTransactionNotSupportedError extends BaseError {\n  override name = \"SignTransactionNotSupported\";\n\n  /**\n   * Throws an error indicating that signing a transaction is not supported by smart contracts.\n   *\n   \n   */ constructor() {\n    super(`SignTransaction is not supported by smart contracts`);\n  }\n}\n\n/**\n * Custom error class `FailedToGetStorageSlotError` which is used to signal a failure when attempting to retrieve a storage slot. This error includes the slot and slot descriptor in its message and inherits from `BaseError`.\n */\nexport class FailedToGetStorageSlotError extends BaseError {\n  override name = \"FailedToGetStorageSlotError\";\n\n  /**\n   * Custom error message constructor for failing to get a specific storage slot.\n   *\n   * @param {string} slot The storage slot that failed to be accessed or retrieved\n   * @param {string} slotDescriptor A description of the storage slot, for additional context in the error message\n   */\n  constructor(slot: string, slotDescriptor: string) {\n    super(`Failed to get storage slot ${slot} (${slotDescriptor})`);\n  }\n}\n\n/**\n * Represents an error indicating that batch execution is not supported for a specific account type.\n */\nexport class BatchExecutionNotSupportedError extends BaseError {\n  override name = \"BatchExecutionNotSupportedError\";\n\n  /**\n   * Constructs an error message indicating that batch execution is not supported by the specified account type.\n   *\n   * @param {string} accountType the type of account that does not support batch execution\n   */\n  constructor(accountType: string) {\n    super(`Batch execution is not supported by ${accountType}`);\n  }\n}\n\n/**\n * Represents an error that occurs when an account requires an owner to execute but none is provided.\n */\nexport class AccountRequiresOwnerError extends BaseError {\n  override name = \"AccountRequiresOwnerError\";\n\n  /**\n   * Constructs an error indicating that an account of the specified type requires an owner to execute.\n   *\n   * @param {string} accountType The type of account that requires an owner\n   */\n  constructor(accountType: string) {\n    super(`Account of type ${accountType} requires an owner to execute`);\n  }\n}\n\n/**\n * Represents an error that occurs when an attempt is made to call `UpgradeToAndCall` on an account type that does not support it. Includes the account type in the error message.\n */\nexport class UpgradeToAndCallNotSupportedError extends BaseError {\n  override name = \"UpgradeToAndCallNotSupportedError\";\n\n  /**\n   * Constructs an error message indicating that `UpgradeToAndCall` is not supported by the specified account type.\n   *\n   * @param {string} accountType The type of account that does not support `UpgradeToAndCall`\n   */\n  constructor(accountType: string) {\n    super(`UpgradeToAndCall is not supported by ${accountType}`);\n  }\n}\n\n/**\n * Represents an error thrown when an account type does not match the expected type.\n */\nexport class IncorrectAccountType extends BaseError {\n  override name = \"IncorrectAccountTypeError\";\n\n  /**\n   * Constructs an error object indicating that the expected account type does not match the actual account type.\n   *\n   * @param {string} expected the expected account type\n   * @param {string} actual the actual account type that was received\n   */\n  constructor(expected: string, actual: string) {\n    super(`Expected account type ${expected}, got ${actual}`);\n  }\n}\n\n/**\n * Error class indicating that a smart account operation requires a signer.\n */\nexport class SmartAccountWithSignerRequiredError extends BaseError {\n  override name = \"SmartAccountWithSignerRequiredError\";\n\n  /**\n   * Initializes a new instance of the error class with a predefined error message indicating that a smart account requires a signer.\n   */ constructor() {\n    super(\"Smart account requires a signer\");\n  }\n}\n"]}