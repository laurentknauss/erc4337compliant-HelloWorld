import * as chains from "viem/chains";
import { type Chain } from "viem/chains";
export declare const ChainsById: Map<number, chains.Chain>;
/**
 * Converts a given chain ID to a coin type, following specific standards for mainnet and non-mainnet chains.
 *
 * @example
 * ```ts
 * import { convertChainIdToCoinType } from "@aa-sdk/core";
 * import { sepolia } from "viem/chains";
 *
 * const coinType = convertChainIdToCoinType(sepolia.id);
 * ```
 *
 * @param {number} chainId the blockchain chain ID that you want to convert to a coin type
 * @returns {number} the corresponding coin type for the given chain ID
 */
export declare const convertChainIdToCoinType: (chainId: number) => number;
/**
 * Converts a coin type to a chain ID based on predefined mappings. This function follows ENSIP-9 for coin type 60 and ENSIP-11 for other coin types.
 *
 * @example
 * ```ts
 * import { convertChainIdToCoinType, convertCoinTypeToChainId } from "@aa-sdk/core";
 * import { sepolia } from "viem/chains";
 *
 * const coinType = convertChainIdToCoinType(sepolia.id);
 * const chainId = convertCoinTypeToChainId(coinType);
 * ```
 *
 * @param {number} coinType the coin type to be converted to a chain ID
 * @returns {number} the corresponding chain ID
 */
export declare const convertCoinTypeToChainId: (coinType: number) => number;
/**
 * Converts a coin type to its corresponding blockchain chain based on a predefined mapping.
 *
 * @example
 * ```ts
 * import { convertChainIdToCoinType, convertCoinTypeToChain } from "@aa-sdk/core";
 * import { sepolia } from "viem/chains";
 *
 * const coinType = convertChainIdToCoinType(sepolia.id);
 * const chain = convertCoinTypeToChain(coinType);
 * ```
 *
 * @param {number} coinType The numerical identifier for the coin type
 * @returns {Chain} The corresponding blockchain chain
 * @throws {Error} If the coin type does not map to a supported chain
 */
export declare const convertCoinTypeToChain: (coinType: number) => Chain;
