import { type Chain, type Client, type FallbackTransport, type PublicActions, type PublicClient, type PublicClientConfig, type PublicRpcSchema, type Transport } from "viem";
import { type BundlerActions, type BundlerRpcSchema } from "./decorators/bundlerClient.js";
export type BundlerClient<T extends Transport = Transport> = Client<T, Chain, undefined, [
    ...PublicRpcSchema,
    ...BundlerRpcSchema
], PublicActions<T, Chain> & BundlerActions>;
/**
 * Creates a bundler client from an existing public client with the provided transport and chain.
 *
 * @example
 * ```ts
 * import { createPublicClient } from "viem";
 * import { createBundlerClientFromExisting } from "@aa-sdk/core";
 *
 * const publicClient = createPublicClient(...);
 * const bundlerClient = createBundlerClientFromExisting(publicClient);
 * ```
 *
 * @param {PublicClient<T, Chain>} client The existing public client to be extended with bundler actions
 * @returns {BundlerClient<T>} A bundler client that extends the functionality of the provided public client
 */
export declare const createBundlerClientFromExisting: <T extends Transport | FallbackTransport = Transport>(client: PublicClient<T, Chain>) => BundlerClient<T>;
/**
 * Creates a PublicClient with methods for calling Bundler RPC methods
 *
 * @param {PublicClientConfig<TTransport, Chain> & { type?: string }} args - configuration for the client
 * @returns {BundlerClient<TTransport>} a PublicClient with methods for calling Bundler RPC methods
 */
export declare function createBundlerClient<TTransport extends Transport>(args: PublicClientConfig<TTransport, Chain> & {
    type?: string;
}): BundlerClient<TTransport>;
//# sourceMappingURL=bundlerClient.d.ts.map